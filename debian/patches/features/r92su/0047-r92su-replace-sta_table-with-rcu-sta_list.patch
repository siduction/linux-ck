From 111e9af782254f92d3cc85b1b947025629e2093a Mon Sep 17 00:00:00 2001
From: Christian Lamparter <chunkeey@googlemail.com>
Date: Sun, 21 Apr 2013 19:45:45 +0200
Subject: [PATCH 47/65] r92su: replace sta_table with (rcu) sta_list

Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
---
 r92su/debugfs.c |  2 +-
 r92su/main.c    | 10 ++++++--
 r92su/r92su.h   |  2 +-
 r92su/sta.c     | 73 ++++++++++++++++++++-------------------------------------
 r92su/sta.h     |  5 ++++
 r92su/trace.h   |  2 ++
 6 files changed, 43 insertions(+), 51 deletions(-)

--- a/drivers/net/wireless/r92su/debugfs.c
+++ b/drivers/net/wireless/r92su/debugfs.c
@@ -257,7 +257,7 @@ static char *r92su_debugfs_sta_table_rea
 {
 	int i;
 	rcu_read_lock();
-	for (i = 0; i < ARRAY_SIZE(r92su->sta_table); i++) {
+	for (i = 0; i < MAX_STA; i++) {
 		struct r92su_sta *sta = r92su_sta_get_by_macid(r92su, i);
 		struct r92su_key *key;
 
--- a/drivers/net/wireless/r92su/main.c
+++ b/drivers/net/wireless/r92su/main.c
@@ -1399,7 +1399,7 @@ static int r92su_stop(struct net_device
 	r92su->scan_request = NULL;
 	r92su->want_connect_bss = NULL;
 
-	for (i = 0; i < ARRAY_SIZE(r92su->sta_table); i++)
+	for (i = 0; i < MAX_STA; i++)
 		r92su_sta_del(r92su, i);
 
 	mutex_unlock(&r92su->lock);
@@ -1508,6 +1508,13 @@ struct r92su *r92su_alloc(struct device
 	mutex_init(&r92su->lock);
 	spin_lock_init(&r92su->rx_path);
 
+	INIT_LIST_HEAD(&r92su->sta_list);
+	/* Note: The sta_lock is only needed, if an entry in the
+	 * station list is updated. The station data itself is
+	 * protected by RCU.
+	 */
+	spin_lock_init(&r92su->sta_lock);
+
 	set_wiphy_dev(r92su->wdev.wiphy, main_dev);
 	r92su->wdev.iftype = NL80211_IFTYPE_STATION;
 
@@ -1527,7 +1534,6 @@ struct r92su *r92su_alloc(struct device
 	INIT_WORK(&r92su->add_bss_work, r92su_bss_add_work);
 	INIT_WORK(&r92su->connect_bss_work, r92su_bss_connect_work);
 	INIT_DELAYED_WORK(&r92su->survey_done_work, r92su_survey_done_work);
-	INIT_LIST_HEAD(&r92su->sta_list);
 	r92su_hw_init(r92su);
 
 	r92su->wq = create_singlethread_workqueue(R92SU_DRVNAME);
--- a/drivers/net/wireless/r92su/r92su.h
+++ b/drivers/net/wireless/r92su/r92su.h
@@ -157,7 +157,7 @@ struct r92su {
 
 	/* sta + keys */
 	struct list_head sta_list;
-	struct r92su_sta __rcu *sta_table[32];
+	spinlock_t sta_lock;
 
 	/* cfg80211 info */
 	struct ieee80211_supported_band band_2GHZ;
--- a/drivers/net/wireless/r92su/sta.c
+++ b/drivers/net/wireless/r92su/sta.c
@@ -87,27 +87,6 @@ static void r92su_free_sta_rcu(struct rc
 	kfree(sta);
 }
 
-/* need to be called under rcu lock */
-static void r92su_free_sta(struct r92su_sta *sta)
-{
-	if (sta) {
-		list_del_rcu(&sta->list);
-		call_rcu(&sta->rcu_head, r92su_free_sta_rcu);
-	}
-}
-
-/* need to be called under rcu lock */
-static void r92su_sta_xchg(struct r92su *r92su,
-			   struct r92su_sta *new_sta)
-{
-	struct r92su_sta *old_sta;
-	unsigned int mac_id = new_sta->mac_id % ARRAY_SIZE(r92su->sta_table);
-
-	old_sta = rcu_dereference(r92su->sta_table[mac_id]);
-	rcu_assign_pointer(r92su->sta_table[mac_id], new_sta);
-	r92su_free_sta(old_sta);
-}
-
 void r92su_sta_alloc_tid(struct r92su *r92su,
 			 struct r92su_sta *sta,
 			 const u8 tid, u16 ssn)
@@ -147,6 +126,7 @@ struct r92su_sta *r92su_sta_alloc(struct
 
 	sta = kzalloc(sizeof(*sta), flag);
 	if (sta) {
+		unsigned long flags;
 		struct timespec uptime;
 		int i;
 
@@ -158,49 +138,45 @@ struct r92su_sta *r92su_sta_alloc(struct
 		sta->mac_id = mac_id;
 		sta->aid = aid;
 
-		INIT_LIST_HEAD(&sta->list);
 		do_posix_clock_monotonic_gettime(&uptime);
 		sta->last_connected = uptime.tv_sec;
 
-		rcu_read_lock();
-		/* Replace (and free) the previous station with the new one. */
-		r92su_sta_xchg(r92su, sta);
-
-		/* in station mode, there is only one entry in the
-		 * station table/station list. no locking is required.
-		 *
-		 * in ibss mode, additional sta_alloc and remove calls
-		 * from participating stations come from an irq-context.
-		 * Luckily they are already serialized.
-		 */
+		/* Remove the old station */
+		r92su_sta_del(r92su, mac_id);
+
+		spin_lock_irqsave(&r92su->sta_lock, flags);
 		list_add_rcu(&sta->list, &r92su->sta_list);
-		rcu_read_unlock();
+		spin_unlock_irqrestore(&r92su->sta_lock, flags);
 	}
 	return sta;
 }
 
 struct r92su_sta *r92su_sta_get(struct r92su *r92su, const u8 *mac_addr)
 {
-	int i;
-	for (i = 0; i < ARRAY_SIZE(r92su->sta_table); i++) {
-		struct r92su_sta *sta;
+	struct r92su_sta *sta;
 
-		sta = rcu_dereference(r92su->sta_table[i]);
-		if (sta && !memcmp(sta->mac_addr, mac_addr, ETH_ALEN))
+	list_for_each_entry_rcu(sta, &r92su->sta_list, list) {
+		if (memcmp(sta->mac_addr, mac_addr, ETH_ALEN) == 0)
 			return sta;
 	}
+
 	return NULL;
 }
 
 void r92su_sta_del(struct r92su *r92su, int mac_id)
 {
-	struct r92su_sta *old_sta;
-	BUG_ON(mac_id > ARRAY_SIZE(r92su->sta_table));
+	struct r92su_sta *sta;
+	unsigned long flags;
 
 	rcu_read_lock();
-	old_sta = rcu_dereference(r92su->sta_table[mac_id]);
-	rcu_assign_pointer(r92su->sta_table[mac_id], NULL);
-	r92su_free_sta(old_sta);
+	sta = r92su_sta_get_by_macid(r92su, mac_id);
+	if (sta) {
+		spin_lock_irqsave(&r92su->sta_lock, flags);
+		list_del_rcu(&sta->list);
+		spin_unlock_irqrestore(&r92su->sta_lock, flags);
+
+		call_rcu(&sta->rcu_head, r92su_free_sta_rcu);
+	}
 	rcu_read_unlock();
 }
 
@@ -302,10 +278,13 @@ struct r92su_sta *r92su_sta_get_by_idx(s
 	return NULL;
 }
 
-struct r92su_sta *r92su_sta_get_by_macid(struct r92su *r92su, int macid)
+struct r92su_sta *r92su_sta_get_by_macid(struct r92su *r92su, int mac_id)
 {
-	if (macid < ARRAY_SIZE(r92su->sta_table)) {
-		return rcu_dereference(r92su->sta_table[macid]);
+	struct r92su_sta *sta;
+
+	list_for_each_entry_rcu(sta, &r92su->sta_list, list) {
+		if (sta->mac_id == mac_id)
+			return sta;
 	}
 
 	return NULL;
--- a/drivers/net/wireless/r92su/sta.h
+++ b/drivers/net/wireless/r92su/sta.h
@@ -42,6 +42,11 @@ struct r92su;
 struct r92su_key;
 struct r92su_sta;
 
+/* The MACID field in the tx and rx headers are 5 bits long.
+ * Therefore, the driver can manage 2^5 = 32 stations.
+ */
+#define MAX_STA	32
+
 struct r92su_rx_tid {
 	struct rcu_head rcu_head;
 	spinlock_t lock;
--- a/drivers/net/wireless/r92su/trace.h
+++ b/drivers/net/wireless/r92su/trace.h
@@ -262,9 +262,11 @@ DEFINE_EVENT(r92su_msg_event, r92su_dbg,
 
 #endif /* _R92SU_TRACE_H || TRACE_HEADER_MULTI_READ */
 
+/*
 #undef TRACE_INCLUDE_PATH
 #define TRACE_INCLUDE_PATH .
 #undef TRACE_INCLUDE_FILE
 #define TRACE_INCLUDE_FILE trace
 
 #include <trace/define_trace.h>
+*/
