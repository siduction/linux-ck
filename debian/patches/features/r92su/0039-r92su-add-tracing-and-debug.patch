From ea65b585799085bc06e15303ddb182b9ab622636 Mon Sep 17 00:00:00 2001
From: Christian Lamparter <chunkeey@googlemail.com>
Date: Sun, 14 Apr 2013 20:34:18 +0200
Subject: [PATCH 39/65] r92su: add tracing and debug

Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
---
 Makefile       |    4 +-
 r92su/Kconfig  |   15 ++++
 r92su/Makefile |    7 +-
 r92su/cmd.c    |    3 +
 r92su/debug.c  |   67 ++++++++++++++
 r92su/debug.h  |   45 ++++++++++
 r92su/eeprom.c |    5 +-
 r92su/event.c  |   21 +++--
 r92su/event.h  |    2 +-
 r92su/fw.c     |   18 ++--
 r92su/hw.c     |    6 +-
 r92su/main.c   |    8 +-
 r92su/rx.c     |   10 ++-
 r92su/trace.c  |   53 +++++++++++
 r92su/trace.h  |  270 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 r92su/tx.c     |    2 +
 r92su/usb.c    |   25 ++++--
 17 files changed, 521 insertions(+), 40 deletions(-)
 create mode 100644 r92su/debug.c
 create mode 100644 r92su/debug.h
 create mode 100644 r92su/trace.c
 create mode 100644 r92su/trace.h

#--- a/drivers/net/wireless/Makefile
#+++ b/drivers/net/wireless/Makefile
#@@ -5,10 +5,10 @@ KMOD_SRC ?= $(PWD)/r92su
# 
# # Each configuration option enables a list of files.
# 
#-KMOD_OPTIONS += CONFIG_R92SU=m CONFIG_R92SU_DEBUGFS=y CONFIG_R92SU_WPC=y
#+KMOD_OPTIONS += CONFIG_R92SU=m CONFIG_R92SU_DEBUGFS=y CONFIG_R92SU_WPC=y CONFIG_R92SU_TRACING=y
# 
# # Don't build any of the other drivers
#-EXTRA_CFLAGS += -DDEBUG -DCONFIG_R92SU=m -DCONFIG_R92SU_DEBUGFS=y -DCONFIG_R92SU_WPC=y
#+EXTRA_CFLAGS += -DDEBUG -DCONFIG_R92SU=m -DCONFIG_R92SU_DEBUGFS=y -DCONFIG_R92SU_WPC=y -DCONFIG_R92SU_TRACING=y
# 
# all:
# 	$(MAKE) -C $(KSRC) M=$(KMOD_SRC) $(KMOD_OPTIONS) $(MAKECMDGOALS) EXTRA_CFLAGS="$(EXTRA_CFLAGS)"
--- a/drivers/net/wireless/r92su/Kconfig
+++ b/drivers/net/wireless/r92su/Kconfig
@@ -23,6 +23,21 @@ config R92SU_DEBUGFS
 
 	 Say N, unless you have a good reason.
 
+config R92SU_TRACING
+	bool "R92SU device access tracing"
+        depends on R92SU
+        depends on EVENT_TRACING
+	default n
+	help
+	 Say Y here to trace all commands, including TX frames and IO
+         accesses, sent to the device. 
+
+	 When tracing is not enabled, this option still has some
+	 (though rather small) overhead.
+
+	 If unsure, say Y so we can help you better when problems
+	 occur.
+
 config R92SU_WPC
 	bool
 	depends on R92SU && (INPUT = y || INPUT = R92SU)
--- a/drivers/net/wireless/r92su/Makefile
+++ b/drivers/net/wireless/r92su/Makefile
@@ -1,3 +1,8 @@
-r92su-objs			+= michael.o eeprom.o event.o main.o sta.o usb.o cmd.o fw.o rx.o hw.o tx.o
+r92su-objs	+= 						\
+	michael.o eeprom.o event.o debug.o main.o sta.o usb.o	\
+	cmd.o fw.o rx.o hw.o tx.o				\
+
+
 r92su-$(CONFIG_R92SU_DEBUGFS)	+= debugfs.o
+r92su-$(CONFIG_R92SU_TRACING)	+= trace.o
 obj-$(CONFIG_R92SU)		+= r92su.o
--- a/drivers/net/wireless/r92su/cmd.c
+++ b/drivers/net/wireless/r92su/cmd.c
@@ -36,6 +36,7 @@
 #include "reg.h"
 #include "eeprom.h"
 #include "def.h"
+#include "trace.h"
 
 void r92su_cmd_init(struct r92su *r92su)
 {
@@ -101,6 +102,8 @@ int r92su_h2c_submit(struct r92su *r92su
 
 	spin_lock_irqsave(&r92su->tx_cmd_lock, flags);
 	r92su_h2c_fill_header(r92su, skb, skb->len, cmd, true);
+	trace_r92su_h2c(wiphy_dev(r92su->wdev.wiphy),
+			(struct h2cc2h *) skb->data);
 	r92su_tx_fill_header(skb, skb->len, true, true);
 	err = r92su_usb_tx(r92su, skb, RTL8712_H2CCMD);
 	spin_unlock_irqrestore(&r92su->tx_cmd_lock, flags);
--- /dev/null
+++ b/drivers/net/wireless/r92su/debug.c
@@ -0,0 +1,67 @@
+/******************************************************************************
+ *
+ * Copyright(c) 2009-2013  Realtek Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110, USA
+ *
+ * The full GNU General Public License is included in this distribution in the
+ * file called LICENSE.
+ *
+ * Contact Information:
+ * wlanfae <wlanfae@realtek.com>
+ * Realtek Corporation, No. 2, Innovation Road II, Hsinchu Science Park,
+ * Hsinchu 300, Taiwan.
+ *
+ * Christian Lamparter <chunkeey@googlemail.com>
+ * Joshua Roys <Joshua.Roys@gtri.gatech.edu>
+ * Larry Finger <Larry.Finger@lwfinger.net>
+ *
+ *****************************************************************************/
+#include <linux/kernel.h>
+#include <net/cfg80211.h>
+#include <linux/export.h>
+#include "r92su.h"
+#include "debug.h"
+#include "trace.h"
+
+#define __r92su_fn(fn)						\
+void __r92su_ ##fn(struct r92su *r92su, const char *fmt, ...)	\
+{								\
+        struct va_format vaf = {				\
+                .fmt = fmt,					\
+        };							\
+        va_list args;						\
+								\
+        va_start(args, fmt);					\
+        vaf.va = &args;						\
+        wiphy_ ##fn(r92su->wdev.wiphy, "%pV", &vaf);		\
+        trace_r92su_ ##fn(wiphy_dev(r92su->wdev.wiphy), &vaf);	\
+        va_end(args);						\
+}
+
+__r92su_fn(err)
+__r92su_fn(info)
+
+void __r92su_dbg(struct r92su *r92su, const char *fmt, ...)
+{
+        struct va_format vaf = {
+                .fmt = fmt,
+        };
+        va_list args;
+
+        va_start(args, fmt);
+        vaf.va = &args;
+        trace_r92su_dbg(wiphy_dev(r92su->wdev.wiphy), &vaf);
+        va_end(args);
+}
--- /dev/null
+++ b/drivers/net/wireless/r92su/debug.h
@@ -0,0 +1,45 @@
+/******************************************************************************
+ *
+ * Copyright(c) 2009-2013  Realtek Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110, USA
+ *
+ * The full GNU General Public License is included in this distribution in the
+ * file called LICENSE.
+ *
+ * Contact Information:
+ * wlanfae <wlanfae@realtek.com>
+ * Realtek Corporation, No. 2, Innovation Road II, Hsinchu Science Park,
+ * Hsinchu 300, Taiwan.
+ *
+ * Christian Lamparter <chunkeey@googlemail.com>
+ * Joshua Roys <Joshua.Roys@gtri.gatech.edu>
+ * Larry Finger <Larry.Finger@lwfinger.net>
+ *
+ *****************************************************************************/
+#ifndef __R92SU_DEBUG_H__
+#define __R92SU_DEBUG_H__
+
+#include "r92su.h"
+
+void __r92su_err(struct r92su *r92su, const char *fmt, ...) __printf(2, 3);
+void __r92su_info(struct r92su *r92su, const char *fmt, ...) __printf(2, 3);
+void __r92su_dbg(struct r92su *r92su, const char *fmt, ...) __printf(2, 3);
+
+#define R92SU_ERR(r, f, a...) __r92su_err((r), (f), ## a)
+#define R92SU_INFO(r, f, a...) __r92su_err((r), (f), ## a)
+#define R92SU_DBG(r, f, a...) __r92su_dbg((r), (f), ## a)
+
+#endif /* __R92SU_DEBUG_H__ */
+
--- a/drivers/net/wireless/r92su/eeprom.c
+++ b/drivers/net/wireless/r92su/eeprom.c
@@ -36,11 +36,12 @@
 #include "cmd.h"
 #include "reg.h"
 #include "usb.h"
+#include "debug.h"
 
 static int r92su_parse_eeprom(struct r92su *r92su)
 {
 	if (r92su->eeprom.id != cpu_to_le16(RTL8190_EEPROM_ID)) {
-		wiphy_err(r92su->wdev.wiphy, "eeprom signature check has failed.\n");
+		R92SU_ERR(r92su, "eeprom signature check has failed.\n");
 		return -EINVAL;
 	}
 
@@ -55,7 +56,7 @@ static int r92su_parse_eeprom(struct r92
 		r92su->rf_type = R92SU_2T2R;
 		break;
 	default:
-		wiphy_err(r92su->wdev.wiphy, "unknown board type:%d.\n",
+		R92SU_ERR(r92su, "unknown board type:%d.\n",
 			  r92su->eeprom.board_type);
 		return -EINVAL;
 	}
--- a/drivers/net/wireless/r92su/event.c
+++ b/drivers/net/wireless/r92su/event.c
@@ -35,6 +35,8 @@
 #include "r92su.h"
 #include "event.h"
 #include "h2cc2h.h"
+#include "trace.h"
+#include "debug.h"
 
 typedef void (*c2h_handler)(struct r92su *, const struct h2cc2h *);
 
@@ -42,8 +44,8 @@ static void c2h_fwdbg_event(struct r92su
 {
 	u16 c2h_len = le16_to_cpu(c2h->len);
 
-	wiphy_notice(r92su->wdev.wiphy, "fwdbg: %.*s%s", c2h_len, c2h->data,
-		    c2h->data[c2h_len - 2] == '\n' ? "" : "\n");
+	R92SU_DBG(r92su, "fwdbg: %.*s%s", c2h_len, c2h->data,
+		  c2h->data[c2h_len - 2] == '\n' ? "" : "\n");
 }
 
 static void c2h_survey_event(struct r92su *r92su, const struct h2cc2h *c2h)
@@ -61,7 +63,7 @@ static void c2h_survey_event(struct r92s
 
 	if (len < sizeof(*c2h_bss) || len != bss_len ||
 	    le32_to_cpu(c2h_bss->ie_length) <= 12) {
-		wiphy_err(r92su->wdev.wiphy, "received survey event with bad length.");
+		R92SU_ERR(r92su, "received survey event with bad length.");
 		r92su_mark_dead(r92su);
 		return;
 	}
@@ -171,16 +173,18 @@ void r92su_c2h_event(struct r92su *r92su
 {
 	unsigned int sequence = r92su->c2h_seq++;
 
+	trace_r92su_c2h(wiphy_dev(r92su->wdev.wiphy), c2h);
+
 	if (sequence != c2h->cmd_seq) {
-		wiphy_err(r92su->wdev.wiphy, "received an c2h event out of sequence.\n");
-		wiphy_err(r92su->wdev.wiphy, "expected: %d, got %d\n", sequence,
+		R92SU_ERR(r92su, "received an c2h event out of sequence.\n");
+		R92SU_ERR(r92su, "expected: %d, got %d\n", sequence,
 			  c2h->cmd_seq);
 
 		r92su->c2h_seq = c2h->cmd_seq + 1;
 	}
 
-	wiphy_notice(r92su->wdev.wiphy, "c2h event:%x len:%d\n",
-		     c2h->event, le16_to_cpu(c2h->len));
+	R92SU_DBG(r92su, "c2h event:%x len:%d\n",
+		  c2h->event, le16_to_cpu(c2h->len));
 
 	switch (c2h->event) {
 	case C2H_FWDBG_EVENT:
@@ -215,8 +219,7 @@ void r92su_c2h_event(struct r92su *r92su
 		break;
 
 	default:
-		wiphy_err(r92su->wdev.wiphy, "received invalid c2h event:%x\n",
-			  c2h->event);
+		R92SU_ERR(r92su, "received invalid c2h event:%x\n", c2h->event);
 		print_hex_dump_bytes("C2H:", DUMP_PREFIX_OFFSET, c2h,
 				     le16_to_cpu(c2h->len) + sizeof(*c2h));
 		r92su_mark_dead(r92su);
--- a/drivers/net/wireless/r92su/event.h
+++ b/drivers/net/wireless/r92su/event.h
@@ -35,5 +35,5 @@
 
 void r92su_c2h_event(struct r92su *r92su, const struct h2cc2h *c2h);
 
-#endif /* __R92SU_RX_H__ */
+#endif /* __R92SU_EVENT_H__ */
 
--- a/drivers/net/wireless/r92su/fw.c
+++ b/drivers/net/wireless/r92su/fw.c
@@ -36,6 +36,7 @@
 #include "fw.h"
 #include "def.h"
 #include "reg.h"
+#include "debug.h"
 
 static int r92su_parse_firmware(struct r92su *r92su)
 {
@@ -45,7 +46,7 @@ static int r92su_parse_firmware(struct r
 	unsigned int dmem_size;
 
 	if (r92su->fw->size > RTL8192_MAX_RAW_FIRMWARE_CODE_SIZE) {
-		wiphy_err(r92su->wdev.wiphy, "firmware is too big.\n");
+		R92SU_ERR(r92su, "firmware is too big.\n");
 		return -EINVAL;
 	}
 
@@ -53,13 +54,12 @@ static int r92su_parse_firmware(struct r
 
 	if ((hdr->signature != cpu_to_le16(R8192SU_FW_SIGNATURE)) &&
 	    (hdr->signature != cpu_to_le16(R8712SU_FW_SIGNATURE))) {
-		wiphy_err(r92su->wdev.wiphy, "firmware signature check has failed.\n");
+		R92SU_ERR(r92su, "firmware signature check has failed.\n");
 		return -EINVAL;
 	}
 
 	r92su->fw_version = le16_to_cpu(hdr->version);
-	wiphy_info(r92su->wdev.wiphy, "firmware version: 0x%x\n",
-		 r92su->fw_version);
+	R92SU_INFO(r92su, "firmware version: 0x%x\n", r92su->fw_version);
 
 	r92su->fw_imem_len = imem_size = le32_to_cpu(hdr->img_imem_size);
 	r92su->fw_sram_len = sram_size = le32_to_cpu(hdr->img_sram_size);
@@ -69,17 +69,17 @@ static int r92su_parse_firmware(struct r
 	r92su->fw_sram = r92su->fw_imem + imem_size;
 
 	if (imem_size == 0 || imem_size >= RTL8192_MAX_FIRMWARE_CODE_SIZE) {
-		wiphy_err(r92su->wdev.wiphy, "firmware's imem size is out of range\n");
+		R92SU_ERR(r92su, "firmware's imem size is out of range\n");
 		return -EINVAL;
 	}
 
 	if (sram_size == 0 || sram_size >= RTL8192_MAX_FIRMWARE_CODE_SIZE) {
-		wiphy_err(r92su->wdev.wiphy, "firmware's sram size is out of range\n");
+		R92SU_ERR(r92su, "firmware's sram size is out of range\n");
 		return -EINVAL;
 	}
 
 	if (dmem_size != sizeof(struct fw_priv)) {
-		wiphy_err(r92su->wdev.wiphy, "firmware's dmem size is out of range\n");
+		R92SU_ERR(r92su, "firmware's dmem size is out of range\n");
 		return -EINVAL;
 	}
 
@@ -174,7 +174,7 @@ static int r92su_upload_mem_wait(struct
 	} while (--tries);
 
 	if (!(cpu_status & done2_flag) || (tries == 0)) {
-		wiphy_err(r92su->wdev.wiphy, "firmware's %s upload %s cpu_status=0x%x\n",
+		R92SU_ERR(r92su, "firmware's %s upload %s cpu_status=0x%x\n",
 			mem, (tries == 0) ? "timedout" : "failed", cpu_status);
 		return -EAGAIN;
 	}
@@ -301,7 +301,7 @@ int r92su_load_firmware(struct r92su *r9
 	err = request_firmware(&r92su->fw, RTL8192SU_FIRMWARE,
 			       &r92su->udev->dev);
 	if (err) {
-		wiphy_err(r92su->wdev.wiphy, "firmware '%s' not found.\n",
+		R92SU_ERR(r92su, "firmware '%s' not found.\n",
 			  RTL8192SU_FIRMWARE);
 		return err;
 	}
--- a/drivers/net/wireless/r92su/hw.c
+++ b/drivers/net/wireless/r92su/hw.c
@@ -35,6 +35,7 @@
 #include "reg.h"
 
 #include "usb.h"
+#include "debug.h"
 
 static u8 r92su_halset_sysclk(struct r92su *r92su, u16 clk_set)
 {
@@ -59,8 +60,7 @@ static u8 r92su_halset_sysclk(struct r92
 			if ((clk & SYS_SWHW_SEL))
 				return true;
 
-			wiphy_err(r92su->wdev.wiphy,
-				"wait for SYS_SWHW_SEL in %x\n", clk);
+			R92SU_ERR(r92su, "wait for SYS_SWHW_SEL in %x\n", clk);
 		} while (--tries);
 		return false;
 	}
@@ -217,7 +217,7 @@ static int r92su_usb_init_b_and_c_cut(st
 	} while (--tries);
 
 	if (tries == 0) {
-		wiphy_err(r92su->wdev.wiphy,
+		R92SU_ERR(r92su,
 			 "Polling TXDMA_INIT_VALUE timed out! Current TCR(%#x)\n",
 			 tmpu1b);
 		tmpu1b = r92su_read8(r92su, REG_CR);
--- a/drivers/net/wireless/r92su/main.c
+++ b/drivers/net/wireless/r92su/main.c
@@ -44,6 +44,7 @@
 #include "rx.h"
 #include "fw.h"
 #include "hw.h"
+#include "debug.h"
 #include "debugfs.h"
 
 #define CHAN2G(_hw_value, _freq, _flags) {	\
@@ -287,8 +288,7 @@ static int r92su_connect_set_auth(struct
 		break;
 
 	default:
-		wiphy_err(r92su->wdev.wiphy, "Invalid auth type %d\n",
-			  auth_type);
+		R92SU_ERR(r92su, "Invalid auth type %d\n", auth_type);
 		return -EINVAL;
 	}
 
@@ -316,7 +316,7 @@ static int r92su_connect_set_shared_key(
 		break;
 
 	default:
-		wiphy_err(r92su->wdev.wiphy, "Invalid shared key\n");
+		R92SU_ERR(r92su, "Invalid shared key\n");
 		return -EINVAL;
 	}
 
@@ -535,7 +535,7 @@ static void r92su_bss_add_work(struct wo
 
 		chan_idx = le32_to_cpu(c2h_bss->config.frequency) - 1;
 		if (chan_idx < 0 || chan_idx >= r92su->band_2GHZ.n_channels) {
-			wiphy_err(r92su->wdev.wiphy, "received survey event on bad channel.");
+			R92SU_ERR(r92su, "received survey event on bad channel.");
 			goto next;
 		}
 
--- a/drivers/net/wireless/r92su/rx.c
+++ b/drivers/net/wireless/r92su/rx.c
@@ -40,6 +40,8 @@
 #include "def.h"
 #include "event.h"
 #include "michael.h"
+#include "debug.h"
+#include "trace.h"
 
 static void r92su_rx_add_radiotap(struct r92su *r92su,
 				  rx_hdr *rx_hdr,
@@ -604,7 +606,7 @@ r92su_rx_hw_header_check(struct r92su *r
 	has_protect = ieee80211_has_protected(hdr->frame_control);
 
 	if (has_protect && GET_RX_DESC_SWDEC(&rx->hdr)) {
-		wiphy_err(r92su->wdev.wiphy, "hw didn't decipher frame.\n");
+		R92SU_ERR(r92su, "hw didn't decipher frame.\n");
 		return RX_DROP;
 	}
 
@@ -1087,6 +1089,8 @@ static void r92su_rx_tasklet(unsigned lo
 		struct ieee80211_hdr *hdr;
 		unsigned int drvinfo_size;
 
+		trace_r92su_rx_data(wiphy_dev(r92su->wdev.wiphy), skb);
+
 		rx = (struct rx_packet *) skb->data;
 		drvinfo_size = GET_RX_DESC_DRVINFO_SIZE(&rx->hdr);
 		hdr = (struct ieee80211_hdr *) skb_pull(skb,
@@ -1144,7 +1148,7 @@ void r92su_rx(struct r92su *r92su, void
 		if (GET_RX_DESC_IS_CMD(&rx->hdr)) {
 			if (len - sizeof(rx->hdr) <
 			    le16_to_cpu(rx->c2h.len) + sizeof(rx->c2h)) {
-				wiphy_err(r92su->wdev.wiphy, "received clipped c2h command.");
+				R92SU_ERR(r92su, "received clipped c2h command.");
 				r92su_mark_dead(r92su);
 			} else
 				r92su_c2h_event(r92su, &rx->c2h);
@@ -1169,7 +1173,7 @@ void r92su_rx(struct r92su *r92su, void
 	return;
 
 err_garbage:
-	wiphy_err(r92su->wdev.wiphy, "received clipped frame.");
+	R92SU_ERR(r92su, "received clipped frame.");
 	return;
 }
 
--- /dev/null
+++ b/drivers/net/wireless/r92su/trace.c
@@ -0,0 +1,53 @@
+/******************************************************************************
+ *
+ * Copyright(c) 2009-2013  Realtek Corporation.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110, USA
+ *
+ * The full GNU General Public License is included in this distribution in the
+ * file called LICENSE.
+ *
+ * Contact Information:
+ * wlanfae <wlanfae@realtek.com>
+ * Realtek Corporation, No. 2, Innovation Road II, Hsinchu Science Park,
+ * Hsinchu 300, Taiwan.
+ *
+ * Christian Lamparter <chunkeey@googlemail.com>
+ * Joshua Roys <Joshua.Roys@gtri.gatech.edu>
+ * Larry Finger <Larry.Finger@lwfinger.net>
+ *
+ *****************************************************************************/
+#include <linux/module.h>
+
+/* sparse doesn't like tracepoint macros */
+#ifndef __CHECKER__
+
+#define CREATE_TRACE_POINTS
+#include "trace.h"
+
+EXPORT_TRACEPOINT_SYMBOL(r92su_h2c);
+EXPORT_TRACEPOINT_SYMBOL(r92su_c2h);
+EXPORT_TRACEPOINT_SYMBOL(r92su_ioread32);
+EXPORT_TRACEPOINT_SYMBOL(r92su_ioread16);
+EXPORT_TRACEPOINT_SYMBOL(r92su_ioread8);
+EXPORT_TRACEPOINT_SYMBOL(r92su_iowrite32);
+EXPORT_TRACEPOINT_SYMBOL(r92su_iowrite16);
+EXPORT_TRACEPOINT_SYMBOL(r92su_iowrite8);
+EXPORT_TRACEPOINT_SYMBOL(r92su_tx_data);
+EXPORT_TRACEPOINT_SYMBOL(r92su_rx_data);
+EXPORT_TRACEPOINT_SYMBOL(r92su_err);
+EXPORT_TRACEPOINT_SYMBOL(r92su_info);
+EXPORT_TRACEPOINT_SYMBOL(r92su_dbg);
+#endif
+
--- /dev/null
+++ b/drivers/net/wireless/r92su/trace.h
@@ -0,0 +1,270 @@
+#if !defined(_R92SU_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
+
+#include <net/cfg80211.h>
+#include <linux/skbuff.h>
+#include <linux/tracepoint.h>
+#include "def.h"
+
+#if !defined(_R92SU_TRACE_H)
+
+#endif /* __R92SU_TRACE_H */
+
+#define _R92SU_TRACE_H
+
+/* create empty functions when tracing is disabled */
+#if !defined(CONFIG_R92SU_TRACING)
+#undef TRACE_EVENT
+#define TRACE_EVENT(name, proto, ...) \
+static inline void trace_ ## name(proto) {}
+#undef DECLARE_EVENT_CLASS
+#define DECLARE_EVENT_CLASS(...)
+#undef DEFINE_EVENT
+#define DEFINE_EVENT(evt_class, name, proto, ...) \
+static inline void trace_ ## name(proto) {}
+#endif /* !CONFIG_R92SU_TRACING || __CHECKER__ */
+
+#define DEV_ENTRY	__string(dev, dev_name(dev))
+#define DEV_ASSIGN	__assign_str(dev, dev_name(dev))
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM r92su_h2cc2h
+
+TRACE_EVENT(r92su_h2c,
+	TP_PROTO(const struct device *dev, const struct h2cc2h *h2c),
+
+	TP_ARGS(dev, h2c),
+
+	TP_STRUCT__entry(
+		DEV_ENTRY
+		__field(unsigned int, event)
+		__field(unsigned int, cmd_seq)
+ 		__field(size_t, len)
+		__dynamic_array(u8, h2c, le16_to_cpu(h2c->len))
+	),
+
+	TP_fast_assign(
+		DEV_ASSIGN;
+		__entry->event = h2c->event;
+		__entry->cmd_seq = h2c->cmd_seq;
+		__entry->len = le16_to_cpu(h2c->len);
+                memcpy(__get_dynamic_array(h2c), h2c, __entry->len);
+        ),
+
+	TP_printk(
+		"[%s] send cmd 0x%x, seq:%d, len %zd",
+		__get_str(dev), __entry->event, __entry->cmd_seq, __entry->len
+	)
+);
+
+TRACE_EVENT(r92su_c2h,
+	TP_PROTO(const struct device *dev, const struct h2cc2h *c2h),
+
+	TP_ARGS(dev, c2h),
+
+	TP_STRUCT__entry(
+		DEV_ENTRY
+		__field(unsigned int, event)
+		__field(unsigned int, cmd_seq)
+ 		__field(size_t, len)
+		__dynamic_array(u8, c2h, le16_to_cpu(c2h->len))
+	),
+
+	TP_fast_assign(
+		DEV_ASSIGN;
+		__entry->event = c2h->event;
+		__entry->cmd_seq = c2h->cmd_seq;
+		__entry->len = le16_to_cpu(c2h->len);
+                memcpy(__get_dynamic_array(c2h), c2h, __entry->len);
+        ),
+
+	TP_printk(
+		"[%s] received event 0x%x, seq:%d, len %zd",
+		__get_str(dev), __entry->event, __entry->cmd_seq, __entry->len
+	)
+);
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM r92su_io
+
+TRACE_EVENT(r92su_ioread32,
+	TP_PROTO(const struct device *dev, const u32 address, const u32 val),
+	TP_ARGS(dev, address, val),
+	TP_STRUCT__entry(
+		DEV_ENTRY
+		__field(u32, address)
+		__field(u32, val)
+	),
+	TP_fast_assign(
+		DEV_ASSIGN;
+		__entry->address = address;
+		__entry->val = val;
+	),
+	TP_printk("[%s] read32 io[%#x] = %#x",
+		  __get_str(dev), __entry->address, __entry->val)
+);
+
+TRACE_EVENT(r92su_ioread16,
+	TP_PROTO(const struct device *dev, const u32 address, const u16 val),
+	TP_ARGS(dev, address, val),
+	TP_STRUCT__entry(
+		DEV_ENTRY
+		__field(u32, address)
+		__field(u16, val)
+	),
+	TP_fast_assign(
+		DEV_ASSIGN;
+		__entry->address = address;
+		__entry->val = val;
+	),
+	TP_printk("[%s] read16 io[%#x] = %#x",
+		  __get_str(dev), __entry->address, __entry->val)
+);
+
+TRACE_EVENT(r92su_ioread8,
+	TP_PROTO(const struct device *dev, const u32 address, const u8 val),
+	TP_ARGS(dev, address, val),
+	TP_STRUCT__entry(
+		DEV_ENTRY
+		__field(u32, address)
+		__field(u8, val)
+	),
+	TP_fast_assign(
+		DEV_ASSIGN;
+		__entry->address = address;
+		__entry->val = val;
+	),
+	TP_printk("[%s] read8 io[%#x] = %#x",
+		  __get_str(dev), __entry->address, __entry->val)
+);
+
+TRACE_EVENT(r92su_iowrite8,
+	TP_PROTO(const struct device *dev, const u32 address, const u8 val),
+	TP_ARGS(dev, address, val),
+	TP_STRUCT__entry(
+		DEV_ENTRY
+		__field(u32, address)
+		__field(u8, val)
+	),
+	TP_fast_assign(
+		DEV_ASSIGN;
+		__entry->address = address;
+		__entry->val = val;
+	),
+	TP_printk("[%s] write8 io[%#x] = %#x)",
+		  __get_str(dev), __entry->address, __entry->val)
+);
+
+TRACE_EVENT(r92su_iowrite16,
+	TP_PROTO(const struct device *dev, const u32 address, const u16 val),
+	TP_ARGS(dev, address, val),
+	TP_STRUCT__entry(
+		DEV_ENTRY
+		__field(u32, address)
+		__field(u16, val)
+	),
+	TP_fast_assign(
+		DEV_ASSIGN;
+		__entry->address = address;
+		__entry->val = val;
+	),
+	TP_printk("[%s] write16 io[%#x] = %#x)",
+		  __get_str(dev), __entry->address, __entry->val)
+);
+
+TRACE_EVENT(r92su_iowrite32,
+	TP_PROTO(const struct device *dev, const u32 address, const u32 val),
+	TP_ARGS(dev, address, val),
+	TP_STRUCT__entry(
+		DEV_ENTRY
+		__field(u32, address)
+		__field(u32, val)
+	),
+	TP_fast_assign(
+		DEV_ASSIGN;
+		__entry->address = address;
+		__entry->val = val;
+	),
+	TP_printk("[%s] write32 io[%#x] = %#x)",
+		  __get_str(dev), __entry->address, __entry->val)
+);
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM r92su_data
+
+TRACE_EVENT(r92su_tx_data,
+	TP_PROTO(const struct device *dev,
+		 const struct sk_buff *skb),
+	TP_ARGS(dev, skb),
+	TP_STRUCT__entry(
+		DEV_ENTRY
+
+		__dynamic_array(u8, data, skb->len)
+	),
+	TP_fast_assign(
+		DEV_ASSIGN;
+		memcpy(__get_dynamic_array(data), skb->data, skb->len);
+	),
+	TP_printk("[%s] TX frame data", __get_str(dev))
+);
+
+TRACE_EVENT(r92su_rx_data,
+	TP_PROTO(const struct device *dev,
+		 const struct sk_buff *skb),
+	TP_ARGS(dev, skb),
+	TP_STRUCT__entry(
+		DEV_ENTRY
+
+		__dynamic_array(u8, data, skb->len)
+	),
+	TP_fast_assign(
+		DEV_ASSIGN;
+		memcpy(__get_dynamic_array(data), skb->data, skb->len);
+	),
+        TP_printk("[%s] RX frame data", __get_str(dev))
+);
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM r92su_msg
+
+#define MAX_MSG_LEN     110
+
+DECLARE_EVENT_CLASS(r92su_msg_event,
+	TP_PROTO(const struct device *dev, struct va_format *vaf),
+	TP_ARGS(dev, vaf),
+	TP_STRUCT__entry(
+		DEV_ENTRY
+
+		__dynamic_array(char, msg, MAX_MSG_LEN)
+	),
+	TP_fast_assign(
+		DEV_ASSIGN;
+		WARN_ON_ONCE(vsnprintf(__get_dynamic_array(msg),
+				       MAX_MSG_LEN, vaf->fmt,
+				       *vaf->va) >= MAX_MSG_LEN);
+	),
+	TP_printk("[%s] %s", __get_str(dev), __get_str(msg))
+);
+
+DEFINE_EVENT(r92su_msg_event, r92su_err,
+	TP_PROTO(const struct device *dev, struct va_format *vaf),
+	TP_ARGS(dev, vaf)
+);
+
+DEFINE_EVENT(r92su_msg_event, r92su_info,
+	TP_PROTO(const struct device *dev, struct va_format *vaf),
+	TP_ARGS(dev, vaf)
+);
+
+DEFINE_EVENT(r92su_msg_event, r92su_dbg,
+	TP_PROTO(const struct device *dev, struct va_format *vaf),
+	TP_ARGS(dev, vaf)
+);
+
+#endif /* _R92SU_TRACE_H || TRACE_HEADER_MULTI_READ */
+
+#undef TRACE_INCLUDE_PATH
+#define TRACE_INCLUDE_PATH .
+#undef TRACE_INCLUDE_FILE
+#define TRACE_INCLUDE_FILE trace
+
+#include <trace/define_trace.h>
--- a/drivers/net/wireless/r92su/tx.c
+++ b/drivers/net/wireless/r92su/tx.c
@@ -42,6 +42,7 @@
 #include "usb.h"
 #include "cmd.h"
 #include "michael.h"
+#include "trace.h"
 
 static const enum rtl8712_queues_t r92su_802_1d_to_ac[] = {
 	[IEEE80211_AC_BK] = RTL8712_BKQ,
@@ -592,6 +593,7 @@ tx_drop:
 		r92su->wdev.netdev->stats.tx_packets++;
 		r92su->wdev.netdev->stats.tx_bytes += skb->len;
 
+		trace_r92su_tx_data(wiphy_dev(r92su->wdev.wiphy), skb);
 		r92su_usb_tx(r92su, skb, GET_TX_DESC_QUEUE_SEL(tx_hdr));
 	}
 	rcu_read_unlock();
--- a/drivers/net/wireless/r92su/usb.c
+++ b/drivers/net/wireless/r92su/usb.c
@@ -37,6 +37,7 @@
 #include "usb.h"
 #include "rx.h"
 #include "tx.h"
+#include "trace.h"
 
 static bool modparam_noht;
 module_param_named(noht, modparam_noht, bool, S_IRUGO);
@@ -108,21 +109,30 @@ u8 r92su_read8(struct r92su *r92su, cons
 {
 	u8 data;
 	r92su_read_helper(r92su, address, &data, sizeof(data));
+	trace_r92su_ioread8(wiphy_dev(r92su->wdev.wiphy), address, data);
 	return data;
 }
 
 u16 r92su_read16(struct r92su *r92su, const u32 address)
 {
-	__le16 data;
-	r92su_read_helper(r92su, address, &data, sizeof(data));
-	return le16_to_cpu(data);
+	__le16 raw_data;
+	u16 data;
+
+	r92su_read_helper(r92su, address, &raw_data, sizeof(raw_data));
+	data = le16_to_cpu(raw_data);
+	trace_r92su_ioread16(wiphy_dev(r92su->wdev.wiphy), address, data);
+	return data;
 }
 
 u32 r92su_read32(struct r92su *r92su, const u32 address)
 {
-	__le32 data;
-	r92su_read_helper(r92su, address, &data, sizeof(data));
-	return le32_to_cpu(data);
+	__le32 raw_data;
+	u32 data;
+
+	r92su_read_helper(r92su, address, &raw_data, sizeof(raw_data));
+	data = le32_to_cpu(raw_data);
+	trace_r92su_ioread32(wiphy_dev(r92su->wdev.wiphy), address, data);
+	return data;
 }
 
 static void r92su_write_helper(struct r92su *r92su, const u32 address,
@@ -140,18 +150,21 @@ static void r92su_write_helper(struct r9
 void r92su_write8(struct r92su *r92su, const u32 address, const u8 data)
 {
 	u8 tmp = data;
+	trace_r92su_iowrite8(wiphy_dev(r92su->wdev.wiphy), address, data);
 	r92su_write_helper(r92su, address, &tmp, sizeof(tmp));
 }
 
 void r92su_write16(struct r92su *r92su, const u32 address, const u16 data)
 {
 	__le16 tmp = cpu_to_le16(data);
+	trace_r92su_iowrite16(wiphy_dev(r92su->wdev.wiphy), address, data);
 	r92su_write_helper(r92su, address, &tmp, sizeof(tmp));
 }
 
 void r92su_write32(struct r92su *r92su, const u32 address, const u32 data)
 {
 	__le32 tmp = cpu_to_le32(data);
+	trace_r92su_iowrite32(wiphy_dev(r92su->wdev.wiphy), address, data);
 	r92su_write_helper(r92su, address, &tmp, sizeof(tmp));
 }
 
