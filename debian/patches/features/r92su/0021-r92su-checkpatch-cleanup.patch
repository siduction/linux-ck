From 18462a043b2e5a784849f5bd0b5dc6099f5efb96 Mon Sep 17 00:00:00 2001
From: Christian Lamparter <chunkeey@googlemail.com>
Date: Sat, 6 Apr 2013 21:41:19 +0200
Subject: [PATCH 21/65] r92su: checkpatch cleanup

Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
---
 TODO            |    3 ++-
 r92su/Kconfig   |   17 +++++++++++------
 r92su/Makefile  |    2 +-
 r92su/debugfs.c |    5 ++---
 r92su/event.c   |   46 +++++++++++++++++++++++++++++++---------------
 r92su/h2cc2h.h  |    9 +--------
 r92su/main.c    |   22 +++++++++-------------
 r92su/rx.c      |    3 ++-
 r92su/tx.c      |   14 +++++---------
 9 files changed, 64 insertions(+), 57 deletions(-)

#--- a/drivers/net/wireless/TODO
#+++ b/drivers/net/wireless/TODO
#@@ -1,7 +1,7 @@
# TODO:
#  - rx statistics (Signal/Quality)
#    rtl8192su provides a wide range of noise and signal levels,
#-   but they need to be read, processed and passed to mac80211.
#+   but they need to be read, processed and passed to cfg80211.
# 
#  - figure out which firmware commands are really implemented
#    in the firmware. Some just seem to be NOPs.
#@@ -35,3 +35,4 @@ KNOWN LIMITATIONS:
#  - No AP/P2P mode (firmware limitation)
#  - No accurate tx feedback (fw-host protocol limitation)
#  - (More to come)
#+ - In ibss mode, the device sends out frames with HT rates.
--- a/drivers/net/wireless/r92su/Kconfig
+++ b/drivers/net/wireless/r92su/Kconfig
@@ -3,20 +3,25 @@ config R92SU
 	tristate "Realtek RTL8192SU/RTL8191SU/RTL8188SU USB Wireless Network Adapter"
 	depends on USB && CFG80211
 	select FW_LOADER
-	---help---
-	This is the driver for Realtek RTL8192SU/RTL8191SU/RTL8188SU 802.11 USB
-	wireless network adapters.
+	help
+	 This is the driver for Realtek RTL8192SU/RTL8191SU/RTL8188SU 802.11
+	 USB wireless network adapters.
+
+	 For more information, visit our wiki at:
+	 <http://linuxwireless.org/en/users/Drivers/rtl819x>
 
-	If you choose to build it as a module, it will be called r92su
+	 If you choose to build it as a module, it will be called r92su.
 
 config R92SU_DEBUGFS
 	bool "R92SU Debugfs Support"
 	depends on R92SU && DEBUG_FS
 	default n
 	help
-	 Export several driver and device internals to user space.
+	 Export several driver and device internals to user space
+	 via debugfs. Be be advised: writing random data in
+	 "hw_iowrite" might damage the device.
 
-	 Say N, unless you have a good reason. 
+	 Say N, unless you have a good reason.
 
 config R92SU_WPC
 	bool
--- a/drivers/net/wireless/r92su/Makefile
+++ b/drivers/net/wireless/r92su/Makefile
@@ -1,3 +1,3 @@
-r92su-objs			+= main.o sta.o usb.o eeprom.o fw.o cmd.o event.o hw.o rx.o hw.o tx.o michael.o
+r92su-objs			+= michael.o eeprom.o event.o main.o sta.o usb.o cmd.o fw.o rx.o hw.o tx.o
 r92su-$(CONFIG_R92SU_DEBUGFS)	+= debugfs.o
 obj-$(CONFIG_R92SU)		+= r92su.o
--- a/drivers/net/wireless/r92su/debugfs.c
+++ b/drivers/net/wireless/r92su/debugfs.c
@@ -190,7 +190,7 @@ static const struct r92su_debugfs_fops r
 			     _read_bufsize, S_IRUSR | S_IWUSR)
 
 #define __DEBUGFS_DECLARE_RW_FILE(name, _read_bufsize, _dstate)		\
-        __DEBUGFS_DECLARE_FILE(name, r92su_debugfs_##name ##_read,	\
+	__DEBUGFS_DECLARE_FILE(name, r92su_debugfs_##name ##_read,	\
 			       r92su_debugfs_##name ##_write,		\
 			       _read_bufsize, S_IRUSR | S_IWUSR, _dstate)
 
@@ -503,6 +503,5 @@ int r92su_register_debugfs(struct r92su
 
 void r92su_unregister_debugfs(struct r92su *r92su)
 {
-	if (r92su->dfs)
-		debugfs_remove_recursive(r92su->dfs);
+	debugfs_remove_recursive(r92su->dfs);
 }
--- a/drivers/net/wireless/r92su/event.c
+++ b/drivers/net/wireless/r92su/event.c
@@ -57,7 +57,7 @@ static void c2h_survey_event(struct r92s
 	 * ... along with the FCS (since we enabled the RX flag for it
 	 */
 	len = le16_to_cpu(c2h->len) - FCS_LEN;
-	bss_len = le32_to_cpu(c2h_bss->length)- FCS_LEN;
+	bss_len = le32_to_cpu(c2h_bss->length) - FCS_LEN;
 
 	if (len < sizeof(*c2h_bss) || len != bss_len ||
 	    le32_to_cpu(c2h_bss->ie_length) <= 12) {
@@ -169,8 +169,6 @@ static void c2h_addba_report_event(struc
 
 void r92su_c2h_event(struct r92su *r92su, const struct h2cc2h *c2h)
 {
-#define ADD_HANDLER(_id, _handler)	case (_id): (_handler((r92su), (c2h))); break;
-
 	unsigned int sequence = r92su->c2h_seq++;
 
 	if (sequence != c2h->cmd_seq) {
@@ -185,16 +183,36 @@ void r92su_c2h_event(struct r92su *r92su
 		     c2h->event, le16_to_cpu(c2h->len));
 
 	switch (c2h->event) {
-	ADD_HANDLER(C2H_FWDBG_EVENT, c2h_fwdbg_event);
-	ADD_HANDLER(C2H_SURVEY_EVENT, c2h_survey_event);
-	ADD_HANDLER(C2H_SURVEY_DONE_EVENT, c2h_survey_done_event);
-	ADD_HANDLER(C2H_JOIN_BSS_EVENT, c2h_join_bss_event);
-	ADD_HANDLER(C2H_ADD_STA_EVENT, c2h_add_sta_event);
-	ADD_HANDLER(C2H_DEL_STA_EVENT, c2h_del_sta_event);
-	ADD_HANDLER(C2H_ATIM_DONE_EVENT, c2h_atim_done_event);
-	ADD_HANDLER(C2H_REPORT_PWR_STATE_EVENT, c2h_report_pwr_state_event);
-	ADD_HANDLER(C2H_WPS_PBC_EVENT, c2h_wps_pbc_event);
-	ADD_HANDLER(C2H_ADDBA_REPORT_EVENT, c2h_addba_report_event);
+	case C2H_FWDBG_EVENT:
+		c2h_fwdbg_event(r92su, c2h);
+		break;
+	case C2H_SURVEY_EVENT:
+		c2h_survey_event(r92su, c2h);
+		break;
+	case C2H_SURVEY_DONE_EVENT:
+		c2h_survey_done_event(r92su, c2h);
+		break;
+	case C2H_JOIN_BSS_EVENT:
+		c2h_join_bss_event(r92su, c2h);
+		break;
+	case C2H_ADD_STA_EVENT:
+		c2h_add_sta_event(r92su, c2h);
+		break;
+	case C2H_DEL_STA_EVENT:
+		c2h_del_sta_event(r92su, c2h);
+		break;
+	case C2H_ATIM_DONE_EVENT:
+		c2h_atim_done_event(r92su, c2h);
+		break;
+	case C2H_REPORT_PWR_STATE_EVENT:
+		c2h_report_pwr_state_event(r92su, c2h);
+		break;
+	case C2H_WPS_PBC_EVENT:
+		c2h_wps_pbc_event(r92su, c2h);
+		break;
+	case C2H_ADDBA_REPORT_EVENT:
+		c2h_addba_report_event(r92su, c2h);
+		break;
 
 	default:
 		wiphy_err(r92su->wdev.wiphy, "received invalid c2h event:%x\n",
@@ -204,6 +222,4 @@ void r92su_c2h_event(struct r92su *r92su
 		r92su_mark_dead(r92su);
 		break;
 	}
-
-#undef ADD_HANDLER
 }
--- a/drivers/net/wireless/r92su/h2cc2h.h
+++ b/drivers/net/wireless/r92su/h2cc2h.h
@@ -207,12 +207,9 @@ enum h2c_network_infrastruct_mode {
 	MODE_IBSS,
 	MODE_BSS,
 	MODE_AUTO,
-	MODE_INFRA_MAX,		/*
-				 * Apparently that's not a real value,
+	MODE_INFRA_MAX,		/* Apparently that's not a real value,
 				 * just the upper bound
 				 */
-	MODE_AP,		/* maybe this should be = INFRA_MAX? */
-
 	/* keep this last */
 	__MAX_NETWORK_MODE
 };
@@ -221,10 +218,6 @@ enum h2c_op_modes {
 	OP_AUTO = 0,		/* Let the driver decides which AP to join */
 	OP_ADHOC,		/* Single cell network (Ad-Hoc Clients) */
 	OP_INFRA,		/* Multi cell network, roaming, ... */
-	OP_MASTER,		/* Synchronisation master or AP - useless */
-	OP_REPEAT,		/* Wireless Repeater (forwarder) - useless */
-	OP_SECOND,		/* Secondary master/repeater (backup) - useless */
-	OP_MONITOR,		/* Passive monitor (listen only) - useless */
 
 	/* keep this last */
 	__MAC_OP_MODES
--- a/drivers/net/wireless/r92su/main.c
+++ b/drivers/net/wireless/r92su/main.c
@@ -276,7 +276,7 @@ static int r92su_connect_set_auth(struct
 
 	default:
 		wiphy_err(r92su->wdev.wiphy, "Invalid auth type %d\n",
-			  sme->auth_type);
+			  auth_type);
 		return -EINVAL;
 	}
 
@@ -1125,7 +1125,7 @@ static int r92su_join_ibss(struct wiphy
 	}
 
 	r92su->want_connect_bss = bss;
-	err = r92su_h2c_connect(r92su, &bss_priv->fw_bss, create,
+	err = r92su_h2c_connect(r92su, &bss_priv->fw_bss, join,
 				ie_buf, ie - ie_buf);
 	if (err)
 		goto out;
@@ -1550,29 +1550,25 @@ err_out:
 	return err;
 }
 
-#define ADD_REV(type)	[(R92SU_##type)] = (#type)
 static const char *rev_to_string[__R92SU_MAX_REV] = {
-	ADD_REV(FPGA),
-	ADD_REV(A_CUT),
-	ADD_REV(B_CUT),
-	ADD_REV(C_CUT),
+	[R92SU_FPGA] = "FPGA",
+	[R92SU_A_CUT] = "A CUT",
+	[R92SU_B_CUT] = "B CUT",
+	[R92SU_C_CUT] = "C CUT",
 };
 
 static const char *rf_to_string(const enum r92su_rf_type_t type)
 {
-#define ADD_RF(type)	case R92SU_##type: return #type
 	switch (type) {
-	ADD_RF(1T1R);
-	ADD_RF(1T2R);
-	ADD_RF(2T2R);
+	case R92SU_1T1R: return "1T1R";
+	case R92SU_1T2R: return "1T2R";
+	case R92SU_2T2R: return "2T2R";
 	default:
 		return "UNKN";
 	};
 }
-#undef ADD_REV
 
 #define NAME_LEN 32
-
 static int r92su_register_wps_button(struct r92su *r92su)
 {
 #ifdef CONFIG_R92SU_WPC
--- a/drivers/net/wireless/r92su/rx.c
+++ b/drivers/net/wireless/r92su/rx.c
@@ -494,7 +494,8 @@ r92su_rx_handle_icv_mic(struct r92su *r9
 			return RX_DROP;
 
 		tail = data + data_len;
-		michael_mic(&key->tkip.key.key[NL80211_TKIP_DATA_OFFSET_RX_MIC_KEY],
+		michael_mic(&key->tkip.key.
+			    key[NL80211_TKIP_DATA_OFFSET_RX_MIC_KEY],
 			    hdr, data, data_len, mic);
 
 		if (memcmp(mic, tail, MICHAEL_MIC_LEN) != 0) {
--- a/drivers/net/wireless/r92su/tx.c
+++ b/drivers/net/wireless/r92su/tx.c
@@ -127,27 +127,22 @@ r92su_tx_fill_desc(struct r92su *r92su,
 		}
 	}
 
-	/* send EAPOL with failsafe rate */
+	/* send EAPOL, ARPs and DHCP traffic with failsafe rates */
 	if (tx_info->low_rate) {
 		SET_TX_DESC_USER_RATE(hdr, 1);
 		SET_TX_DESC_USER_TX_RATE(hdr, 0x001f8000);	 /* 1M */
-		if (tx_info->sta->ht_sta)
-			SET_TX_DESC_AGG_BREAK(hdr, 1);
 	} else if (tx_info->ampdu) {
 		/* The firmware will automatically enable aggregation
-		 * there's no need to set hdr->agg_en = 1 and hdr->tx_ht = 1;
+		 * there's no need to set agg_en = 1, tx_ht = 1 or
+		 * anything else.
 		 */
 	}
-
 	return TX_CONTINUE;
 }
 
-#define WEP_IV_LEN		4
 #define WEP_ICV_LEN		4
-#define CCMP_HDR_LEN		8
 #define CCMP_MIC_LEN		8
 #define CCMP_TK_LEN		16
-#define TKIP_IV_LEN		8
 #define TKIP_ICV_LEN		4
 
 static enum r92su_tx_control_t
@@ -251,7 +246,8 @@ r92su_tx_add_icv_mic(struct r92su *r92su
 		return TX_CONTINUE;
 
 	case TKIP_ENCRYPTION:
-		michael_mic(&key->tkip.key.key[NL80211_TKIP_DATA_OFFSET_TX_MIC_KEY],
+		michael_mic(&key->tkip.key.
+			    key[NL80211_TKIP_DATA_OFFSET_TX_MIC_KEY],
 			    hdr, data, data_len, skb_put(skb, MICHAEL_MIC_LEN));
 		tx_info->ht_possible = false;
 		return TX_CONTINUE;
