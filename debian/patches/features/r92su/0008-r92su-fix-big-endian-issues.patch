From 85bad801d63c3a420ef536f52e27b9e062e70ffb Mon Sep 17 00:00:00 2001
From: Christian Lamparter <chunkeey@googlemail.com>
Date: Thu, 4 Apr 2013 22:22:38 +0200
Subject: [PATCH 08/65] r92su: fix big endian issues

fix errors reported by sparse __CHECK_ENDIAN__

Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
---
 r92su/cmd.c   |  4 ++--
 r92su/def.h   | 17 +++++++++--------
 r92su/event.c | 19 ++++++++++++-------
 r92su/fw.c    |  2 +-
 r92su/main.c  |  4 ++--
 r92su/rx.c    |  7 ++++---
 r92su/tx.c    |  7 +------
 r92su/usb.c   |  4 ++--
 8 files changed, 33 insertions(+), 31 deletions(-)

--- a/drivers/net/wireless/r92su/cmd.c
+++ b/drivers/net/wireless/r92su/cmd.c
@@ -67,7 +67,7 @@ static void r92su_h2c_fill_header(struct
 
 	memset(h2c, 0, sizeof(*h2c));
 	h2c->cmd_seq = r92su->h2c_seq++;
-	h2c->len = ALIGN(len, H2CC2H_HDR_LEN);
+	h2c->len = cpu_to_le16(ALIGN(len, H2CC2H_HDR_LEN));
 	h2c->event = cmd;
 	h2c->last = last;
 }
@@ -75,7 +75,7 @@ static void r92su_h2c_fill_header(struct
 static void __r92su_tx_fill_header(struct tx_hdr *tx_hdr, unsigned int len,
 				   bool first, bool last, unsigned int qsel)
 {
-	tx_hdr->pkt_len = len - TX_DESC_SIZE;
+	tx_hdr->pkt_len = cpu_to_le16(len - TX_DESC_SIZE);
 	tx_hdr->offset = TX_DESC_SIZE;
 	tx_hdr->last_seg = last;
 	tx_hdr->first_seg = first;
--- a/drivers/net/wireless/r92su/def.h
+++ b/drivers/net/wireless/r92su/def.h
@@ -107,7 +107,8 @@ struct tx_hdr {
 	/* DWORD 3 */
 	u8 heap_page;		/* 0  -  7 */
 	u8 tail_page;		/* 8  - 15 */
-	__le16 seq:12;		/* 16 - 27 */
+	u8 priority;		/* 16 - 23 */
+	u8 unkn:4;		/* 24 - 27 */
 	u8 frag:4;		/* 28 - 31 */
 
 	/* DWORD 4 */
@@ -131,11 +132,11 @@ struct tx_hdr {
 	u8 user_rate:1;		/* 31 */
 
 	/* DWORD 5 */
-	__le16 packet_id:9;	/*  0 -  8 */
+	u16 unkn2:9;	/*  0 -  8 */
 	u8 tx_rate:6;		/*  9 - 14 */
 	u8 dis_fb:1;		/* 15 */
 	u8 data_rate_fb_limit:5;/* 16 - 20 */
-	__le16 tx_agc:11;	/* 21 - 31 */
+	u16 unkn3:11;		/* 21 - 31 */
 
 	/* DWORD 6 */
 	__le16 ip_check_sum;	/* 0  - 15 */
@@ -151,12 +152,13 @@ struct tx_hdr {
 /* Rx Desc */
 #define RX_DESC_SIZE				24
 #define RX_DRV_INFO_SIZE_UNIT			8
+#define RX_LENGTH_MASK				0x3fff /* Bit 0 - 13 */
+#define RX_CRC32_ERR				BIT(14)
+#define RX_ICV_ERR				BIT(15)
 
 struct rx_hdr {
 	/* DWORD 0 */
-	__le16 pkt_len:14;	/*  0 - 13 */
-	u8 crc32:1;		/* 14 */
-	u8 icv:1;		/* 15 */
+	__le16 pkt_len_and_bits;/*  0 - 13, 14, 15 */
 	u8 drvinfo_size:4;	/* 16 - 19 */
 	u8 security:3;		/* 20 - 22 */
 	u8 qos:1;		/* 23 */
@@ -185,8 +187,7 @@ struct rx_hdr {
 	u8 bc:1;		/* 31 */
 
 	/* DWORD 2 */
-	__le16 seq:12;		/*  0 - 11 */
-	u8 frag:4;		/* 12 - 15 */
+	__le16 seq_and_frag;	/*  0 - 15 */
 	u8 pkt_cnt;		/* 16 - 23 */
 	u8 unkn0200:6;		/* 24 - 29 */
 	u8 next_ind:1;		/* 30 */
--- a/drivers/net/wireless/r92su/event.c
+++ b/drivers/net/wireless/r92su/event.c
@@ -40,22 +40,26 @@ typedef void (*c2h_handler)(struct r92su
 
 static void c2h_fwdbg_event(struct r92su *r92su, const struct h2cc2h *c2h)
 {
-	wiphy_notice(r92su->wdev.wiphy, "fwdbg: %.*s%s", c2h->len, c2h->data,
-		    c2h->data[c2h->len - 2] == '\n' ? "" : "\n");
+	u16 c2h_len = le16_to_cpu(c2h->len);
+
+	wiphy_notice(r92su->wdev.wiphy, "fwdbg: %.*s%s", c2h_len, c2h->data,
+		    c2h->data[c2h_len - 2] == '\n' ? "" : "\n");
 }
 
 static void c2h_survey_event(struct r92su *r92su, const struct h2cc2h *c2h)
 {
 	const struct h2cc2h_bss *c2h_bss = (const void *)&c2h->data;
 	struct r92su_add_bss *bss_priv;
+	u32 bss_len;
 	u16 len;
 
 	/* Looks like the FW just attaches the raw probe_response IEs
 	 * ... along with the FCS (since we enabled the RX flag for it
 	 */
 	len = le16_to_cpu(c2h->len) - FCS_LEN;
+	bss_len = le32_to_cpu(c2h_bss->length)- FCS_LEN;
 
-	if (len < sizeof(*c2h_bss) || c2h->len != c2h_bss->length ||
+	if (len < sizeof(*c2h_bss) || len != bss_len ||
 	    le32_to_cpu(c2h_bss->ie_length) <= 12) {
 		wiphy_err(r92su->wdev.wiphy, "received survey event with bad length.");
 		r92su_mark_dead(r92su);
@@ -69,8 +73,8 @@ static void c2h_survey_event(struct r92s
 
 	memcpy(&bss_priv->fw_bss, c2h_bss, len);
 	bss_priv->fw_bss.length = cpu_to_le32(len);
-	bss_priv->fw_bss.ie_length =
-		le32_to_cpu(bss_priv->fw_bss.ie_length) - FCS_LEN;
+	bss_priv->fw_bss.ie_length = cpu_to_le32(
+		le32_to_cpu(bss_priv->fw_bss.ie_length) - FCS_LEN);
 	llist_add(&bss_priv->head, &r92su->add_bss_list);
 	queue_work(r92su->wq, &r92su->add_bss_work);
 }
@@ -93,7 +97,8 @@ static void c2h_join_bss_event(struct r9
 	if (r92su->connect_result)
 		return;
 
-	r92su->connect_result = kmemdup(join_bss, c2h->len, GFP_ATOMIC);
+	r92su->connect_result = kmemdup(join_bss, le16_to_cpu(c2h->len),
+					GFP_ATOMIC);
 	queue_work(r92su->wq, &r92su->connect_bss_work);
 }
 
@@ -195,7 +200,7 @@ void r92su_c2h_event(struct r92su *r92su
 		wiphy_err(r92su->wdev.wiphy, "received invalid c2h event:%x\n",
 			  c2h->event);
 		print_hex_dump_bytes("C2H:", DUMP_PREFIX_OFFSET, c2h,
-				     c2h->len + sizeof(*c2h));
+				     le16_to_cpu(c2h->len) + sizeof(*c2h));
 		r92su_mark_dead(r92su);
 		break;
 	}
--- a/drivers/net/wireless/r92su/fw.c
+++ b/drivers/net/wireless/r92su/fw.c
@@ -147,7 +147,7 @@ static int r92su_upload_firmware_part(st
 		current_block = min(block_size, len - done);
 		done += current_block;
 
-		hdr->pkt_len = current_block;
+		hdr->pkt_len = cpu_to_le16(current_block);
 		hdr->linip = (len == done);
 
 		memcpy(skb_put(skb, current_block), iter, current_block);
--- a/drivers/net/wireless/r92su/main.c
+++ b/drivers/net/wireless/r92su/main.c
@@ -482,9 +482,9 @@ static void r92su_add_bss_work(struct wo
 
 		bss = cfg80211_inform_bss(r92su->wdev.wiphy,
 			&r92su->band_2GHZ.channels[chan_idx], c2h_bss->bssid,
-			le32_to_cpu(c2h_bss->ies.timestamp),
+			le64_to_cpu(c2h_bss->ies.timestamp),
 			le16_to_cpu(c2h_bss->ies.caps),
-			le16_to_cpu(c2h_bss->config.beacon_period),
+			le32_to_cpu(c2h_bss->config.beacon_period),
 			c2h_bss->ies.ie, ie_len,
 			le32_to_cpu(c2h_bss->rssi), GFP_KERNEL);
 
--- a/drivers/net/wireless/r92su/rx.c
+++ b/drivers/net/wireless/r92su/rx.c
@@ -73,7 +73,7 @@ static void r92su_rx_add_radiotap(struct
 
 	/* IEEE80211_RADIOTAP_FLAGS */
 	*pos = IEEE80211_RADIOTAP_F_FCS;
-	if (rx_hdr->crc32)
+	if (rx_hdr->pkt_len_and_bits & cpu_to_le16(RX_CRC32_ERR))
 		*pos |= IEEE80211_RADIOTAP_F_BADFCS;
 	if (rx_hdr->splcp)
 		*pos |= IEEE80211_RADIOTAP_F_SHORTPRE;
@@ -606,7 +606,7 @@ r92su_rx_hw_header_check(struct r92su *r
 	hdr = (struct ieee80211_hdr *) skb->data;
 
 	/* filter out frames with bad fcs... if they did end up here */
-	if (rx->hdr.crc32)
+	if (rx->hdr.pkt_len_and_bits & cpu_to_le16(RX_CRC32_ERR))
 		return RX_DROP;
 
 	has_protect = ieee80211_has_protected(hdr->frame_control);
@@ -1131,7 +1131,8 @@ void r92su_rx(struct r92su *r92su, void
 	while (buf < end && pkt_cnt--) {
 		rx = (struct rx_packet *) buf;
 
-		pkt_len = le16_to_cpu(rx->hdr.pkt_len);
+		pkt_len = le16_to_cpu(rx->hdr.pkt_len_and_bits) &
+			  RX_LENGTH_MASK;
 		hdr_len = RX_DESC_SIZE + rx->hdr.drvinfo_size * 8;
 
 		if (buf + pkt_len + hdr_len + rx->hdr.shift > end)
--- a/drivers/net/wireless/r92su/tx.c
+++ b/drivers/net/wireless/r92su/tx.c
@@ -94,12 +94,7 @@ r92su_tx_fill_desc(struct r92su *r92su,
 
 	/* firmware will increase the seqnum by itself, when
 	 * the driver passes the correct "priority" to it */
-	hdr->seq = prio;
-	hdr->more_frag = !!(i3e->frame_control &
-		cpu_to_le16(IEEE80211_FCTL_MOREFRAGS));
-	hdr->more_data = !!(i3e->frame_control &
-		cpu_to_le16(IEEE80211_FCTL_MOREDATA));
-	hdr->frag = le16_to_cpu(i3e->seq_ctrl & IEEE80211_SCTL_FRAG);
+	hdr->priority = prio;
 
 	hdr->non_qos = !ieee80211_is_data_qos(i3e->frame_control);
 	hdr->bmc = is_multicast_ether_addr(ieee80211_get_DA(i3e));
--- a/drivers/net/wireless/r92su/usb.c
+++ b/drivers/net/wireless/r92su/usb.c
@@ -38,7 +38,7 @@
 #include "rx.h"
 #include "tx.h"
 
-static int r92su_sync_write(struct r92su *r92su, __le16 address,
+static int r92su_sync_write(struct r92su *r92su, u16 address,
 			    const void *data, u16 size)
 {
 	struct usb_device *udev = r92su->udev;
@@ -62,7 +62,7 @@ static int r92su_sync_write(struct r92su
 	return (ret < 0) ? ret : ((ret == size) ? 0 : -EMSGSIZE);
 }
 
-static int r92su_sync_read(struct r92su *r92su, __u16 address,
+static int r92su_sync_read(struct r92su *r92su, u16 address,
 			   void *data, u16 size)
 {
 	struct usb_device *udev = r92su->udev;
