From 596b3c654645c871c0f8b262fdf55c81a1b02c7b Mon Sep 17 00:00:00 2001
From: Christian Lamparter <chunkeey@googlemail.com>
Date: Sat, 6 Apr 2013 01:46:36 +0200
Subject: [PATCH 13/65] r92su: fix most little vs big endian issues

This code now compiles cleanly for a big endian
PowerPC target.

Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
---
 r92su/cmd.c |  26 ++---
 r92su/def.h | 339 ++++++++++++++++++++++++++++++++----------------------------
 r92su/fw.c  |   9 +-
 r92su/rx.c  |  68 +++++++-----
 r92su/tx.c  |  47 ++++-----
 5 files changed, 261 insertions(+), 228 deletions(-)

--- a/drivers/net/wireless/r92su/cmd.c
+++ b/drivers/net/wireless/r92su/cmd.c
@@ -67,30 +67,30 @@ static void r92su_h2c_fill_header(struct
 
 	memset(h2c, 0, sizeof(*h2c));
 	h2c->cmd_seq = r92su->h2c_seq++;
+	if (last)
+		h2c->cmd_seq |= 0x80;
 	h2c->len = cpu_to_le16(ALIGN(len, H2CC2H_HDR_LEN));
 	h2c->event = cmd;
-	h2c->last = last;
 }
 
-static void __r92su_tx_fill_header(struct tx_hdr *tx_hdr, unsigned int len,
+static void __r92su_tx_fill_header(tx_hdr *tx_hdr, unsigned int len,
 				   bool first, bool last, unsigned int qsel)
 {
-	tx_hdr->pkt_len = cpu_to_le16(len - TX_DESC_SIZE);
-	tx_hdr->offset = TX_DESC_SIZE;
-	tx_hdr->last_seg = last;
-	tx_hdr->first_seg = first;
-	tx_hdr->own = 1;
-	tx_hdr->queue_sel = qsel;
+	SET_TX_DESC_PKT_SIZE(tx_hdr, len);
+	SET_TX_DESC_OFFSET(tx_hdr, TX_DESC_SIZE);
+	SET_TX_DESC_LAST_SEG(tx_hdr, last);
+	SET_TX_DESC_FIRST_SEG(tx_hdr, first);
+	SET_TX_DESC_OWN(tx_hdr, 1);
+	SET_TX_DESC_QUEUE_SEL(tx_hdr, qsel);
 }
 
 static void r92su_tx_fill_header(struct sk_buff *skb,
 				 unsigned int len, bool first, bool last)
 {
-	struct tx_hdr *tx_hdr;
-	tx_hdr = (struct tx_hdr *) skb_push(skb, TX_DESC_SIZE);
-
-	memset(tx_hdr, 0, sizeof(*tx_hdr));
-	__r92su_tx_fill_header(tx_hdr, len, first, last, QSLT_CMD);
+	tx_hdr *txhdr;
+	txhdr = (tx_hdr *) skb_push(skb, sizeof(*txhdr));
+	memset(txhdr, 0, sizeof(*txhdr));
+	__r92su_tx_fill_header(txhdr, len, first, last, QSLT_CMD);
 }
 
 int r92su_h2c_submit(struct r92su *r92su, struct sk_buff *skb,
--- a/drivers/net/wireless/r92su/def.h
+++ b/drivers/net/wireless/r92su/def.h
@@ -61,158 +61,183 @@
 /* Tx Desc */
 #define TX_DESC_SIZE				32
 
-struct tx_hdr {
-	/* DWORD 0 */
-	__le16 pkt_len;		/*  0 - 15 */
-	__u8 offset;		/* 16 - 23 */
-	u8 type:2;		/* 24 - 25 */
-	u8 last_seg:1;		/* 26 */
-	u8 first_seg:1;		/* 27 */
-	u8 linip:1;		/* 28 */
-	u8 amsdu:1;		/* 29 */
-	u8 gf:1;		/* 30 */
-	u8 own:1;		/* 31 */
-
-	/* DWORD 1 */
-	u8 mac_id:5;		/*  0 -  4 */
-	u8 more_data:1;		/*  5 */
-	u8 more_frag:1;		/*  6 */
-	u8 pifs:1;		/*  7 */
-	u8 queue_sel:5;		/*  8 - 12 */
-	u8 ack_policy:2;	/* 13 - 14 */
-	u8 no_acm:1;		/* 15 */
-	u8 non_qos:1;		/* 16 */
-	u8 key_id:2;		/* 17 - 18 */
-	u8 oui:1;		/* 19 */
-	u8 pkt_type:1;		/* 20 */
-	u8 en_desc_id:1;	/* 21 */
-	u8 sec_type:2;		/* 22 - 23 */
-	u8 wds:1;		/* 24 */
-	u8 htc:1;		/* 25 */
-	u8 pkt_offset:5;	/* 26 - 30 */
-	u8 hwpc:1;		/* 31 */
-
-	/* DWORD 2 */
-	u8 data_retry_limit:6;	/*  0 -  5 */
-	u8 retry_limit_en:1;	/*  6 */
-	u8 bmc:1;		/*  7 */
-	u8 tsfl:4;		/*  8 - 11 */
-	u8 rts_retry_count:6;	/* 12 - 17 */
-	u8 data_retry_count:6;	/* 18 - 23 */
-	u8 rsvd_macid:5;	/* 24 - 28 */
-	u8 agg_en:1;		/* 29 */
-	u8 agg_break:1;		/* 30 */
-	u8 own_mac:1;		/* 31 */
-
-	/* DWORD 3 */
-	u8 heap_page;		/* 0  -  7 */
-	u8 tail_page;		/* 8  - 15 */
-	u8 priority;		/* 16 - 23 */
-	u8 unkn:4;		/* 24 - 27 */
-	u8 frag:4;		/* 28 - 31 */
-
-	/* DWORD 4 */
-	u8 rts_rate:6;		/*  0 -  5 */
-	u8 dis_rts_fb:1;	/*  6 */
-	u8 rts_rate_fb_limit:4;	/*  7 - 10 */
-	u8 cts_en:1;		/* 11 */
-	u8 rts_en:1;		/* 12 */
-	u8 ra_brsr_id:3;	/* 13 - 15 */
-	u8 tx_ht:1;		/* 16 */
-	u8 tx_short:1;		/* 17 */
-	u8 tx_bw:1;		/* 18 */
-	u8 tx_sub_carrier:2;	/* 19 - 20 */
-	u8 tx_stbc:2;		/* 21 - 22 */
-	u8 tx_rd:1;		/* 23 */
-	u8 rts_ht:1;		/* 24 */
-	u8 rts_short:1;		/* 25 */
-	u8 rts_bw:1;		/* 26 */
-	u8 rts_sub_carrier:2;	/* 27 - 28 */
-	u8 rts_stbc:2;		/* 29 - 30 */
-	u8 user_rate:1;		/* 31 */
-
-	/* DWORD 5 */
-	u16 unkn2:9;	/*  0 -  8 */
-	u8 tx_rate:6;		/*  9 - 14 */
-	u8 dis_fb:1;		/* 15 */
-	u8 data_rate_fb_limit:5;/* 16 - 20 */
-	u16 unkn3:11;		/* 21 - 31 */
-
-	/* DWORD 6 */
-	__le16 ip_check_sum;	/* 0  - 15 */
-	__le16 tcp_check_sum;	/* 16 - 31 */
-
-	/* DWORD 7 */
-	__le16 tx_buffer_size;	/* 0  - 15 */
-	u8 ip_hdr_offset:8;	/* 16 - 23 */
-	u8 cmd_seq:7;		/* 24 - 30 */
-	u8 tcp_en:1;		/* 31 */
-} __packed;
+#define BIT_LEN_MASK_32(__bitlen)	 \
+	(0xFFFFFFFF >> (32 - (__bitlen)))
+
+#define SHIFT_AND_MASK_LE(__pdesc, __off, __shift, __mask)		\
+	((le32_to_cpup(((__le32 *) __pdesc) + (__off)) >> (__shift)) &	\
+	BIT_LEN_MASK_32(__mask))
+
+#define SET_BITS_OFFSET_LE(__pdesc, __off, __shift, __len, __val)	\
+	do {								\
+		__le32 *__ptr = ((__le32 *)(__pdesc)) + (__off);	\
+		u32 __mask = BIT_LEN_MASK_32(__len) << (__shift);	\
+		*__ptr &= cpu_to_le32(~__mask);				\
+		*__ptr |= cpu_to_le32(((__val) << (__shift)) & __mask);	\
+	} while (0)
+
+/* macros to read/write various fields in RX or TX descriptors */
+
+/* Dword 0 */
+#define SET_TX_DESC_PKT_SIZE(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 0, 0, 16, __val)
+#define SET_TX_DESC_OFFSET(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 0, 16, 8, __val)
+#define SET_TX_DESC_TYPE(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 0, 24, 2, __val)
+#define SET_TX_DESC_LAST_SEG(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 0, 26, 1, __val)
+#define SET_TX_DESC_FIRST_SEG(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 0, 27, 1, __val)
+#define SET_TX_DESC_LINIP(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 0, 28, 1, __val)
+#define SET_TX_DESC_OWN(__pdesc, __val)				\
+	SET_BITS_OFFSET_LE(__pdesc, 0, 31, 1, __val)
+
+/* Dword 1 */
+#define GET_TX_DESC_QUEUE_SEL(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 8, 5)
+
+#define SET_TX_DESC_MACID(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 1, 0, 5, __val)
+#define SET_TX_DESC_QUEUE_SEL(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 1, 8, 5, __val)
+#define SET_TX_DESC_NON_QOS(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 1, 16, 1, __val)
+#define SET_TX_DESC_KEY_ID(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 1, 17, 2, __val)
+#define SET_TX_DESC_SEC_TYPE(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 1, 22, 2, __val)
+
+/* Dword 2 */
+#define SET_TX_DESC_BMC(__pdesc, __val)				\
+	SET_BITS_OFFSET_LE(__pdesc, 2, 7, 1, __val)
+#define SET_TX_DESC_AGG_BREAK(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 2, 30, 1, __val)
+
+/* Dword 3 */
+#define SET_TX_DESC_PRIORITY(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 3, 16, 12, __val)
+
+/* Dword 4 */
+#define SET_TX_DESC_USER_RATE(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 4, 31, 1, __val)
+
+/* Dword 5 */
+#define SET_TX_DESC_USER_TX_RATE(__pdesc, __val)		\
+	SET_BITS_OFFSET_LE(__pdesc, 5, 0, 31, __val)
+
+/* Dword 6 */
+#define SET_TX_DESC_IP_CHECK_SUM(__pdesc, __val)		\
+	SET_BITS_OFFSET_LE(__pdesc, 6, 0, 16, __val)
+#define SET_TX_DESC_TCP_CHECK_SUM(__pdesc, __val)		\
+	SET_BITS_OFFSET_LE(__pdesc, 6, 16, 16, __val)
+
+/* Dword 7 */
+#define SET_TX_DESC_TX_BUFFER_SIZE(__pdesc, __val)		\
+	SET_BITS_OFFSET_LE(__pdesc, 7, 0, 16, __val)
+#define SET_TX_DESC_CMD_SEQ(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 7, 24, 7, __val)
+
+/* Rx Desc */
+#define RX_STATUS_DESC_SIZE				24
+#define RX_DRV_INFO_SIZE_UNIT				8
+
+/* DWORD 0 */
+#define GET_RX_STATUS_DESC_PKT_LEN(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 0, 14)
+#define GET_RX_STATUS_DESC_CRC32(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 14, 1)
+#define GET_RX_STATUS_DESC_ICV(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 15, 1)
+#define GET_RX_STATUS_DESC_DRVINFO_SIZE(__pdesc)		\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 16, 4)
+#define GET_RX_STATUS_DESC_SECURITY(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 20, 3)
+#define GET_RX_STATUS_DESC_QOS(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 23, 1)
+#define GET_RX_STATUS_DESC_SHIFT(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 24, 2)
+#define GET_RX_STATUS_DESC_PHY_STATUS(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 26, 1)
+#define GET_RX_STATUS_DESC_SWDEC(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 27, 1)
+#define GET_RX_STATUS_DESC_LAST_SEG(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 28, 1)
+#define GET_RX_STATUS_DESC_FIRST_SEG(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 29, 1)
+#define GET_RX_STATUS_DESC_EOR(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 30, 1)
+#define GET_RX_STATUS_DESC_OWN(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 0, 31, 1)
+
+/* DWORD 1 */
+#define GET_RX_STATUS_DESC_IS_CMD(__pdesc)			\
+	(SHIFT_AND_MASK_LE(__pdesc, 1, 0, 9) == 0x1ff)
+#define GET_RX_STATUS_DESC_MACID(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 0, 5)
+#define GET_RX_STATUS_DESC_TID(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 5, 4)
+#define GET_RX_STATUS_DESC_PAGGR(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 14, 1)
+#define GET_RX_STATUS_DESC_FAGGR(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 15, 1)
+#define GET_RX_STATUS_DESC_A1_FIT(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 16, 4)
+#define GET_RX_STATUS_DESC_A2_FIT(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 20, 4)
+#define GET_RX_STATUS_DESC_PAM(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 24, 1)
+#define GET_RX_STATUS_DESC_PWR(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 25, 1)
+#define GET_RX_STATUS_DESC_MORE_DATA(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 26, 1)
+#define GET_RX_STATUS_DESC_MORE_FRAG(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 27, 1)
+#define GET_RX_STATUS_DESC_TYPE(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 28, 2)
+#define GET_RX_STATUS_DESC_MC(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 30, 1)
+#define GET_RX_STATUS_DESC_BC(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 1, 31, 1)
+
+/* DWORD 2 */
+#define GET_RX_STATUS_DESC_SEQ(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 2, 0, 12)
+#define GET_RX_STATUS_DESC_FRAG(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 2, 12, 4)
+#define GET_RX_STATUS_DESC_PKTCNT(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 2, 16, 8)
+
+/* DWORD 3 */
+#define GET_RX_STATUS_DESC_RX_MCS(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 3, 0, 6)
+#define GET_RX_STATUS_DESC_RX_HT(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 3, 6, 1)
+#define GET_RX_STATUS_DESC_SPLCP(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 3, 8, 1)
+#define GET_RX_STATUS_DESC_BW(__pdesc)				\
+	SHIFT_AND_MASK_LE(__pdesc, 3, 9, 1)
+#define GET_RX_STATUS_DESC_TCP_CHK_RPT(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 3, 11, 1)
+#define GET_RX_STATUS_DESC_IP_CHK_RPT(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 3, 12, 1)
+#define GET_RX_STATUS_DESC_TCP_CHK_VALID(__pdesc)		\
+	SHIFT_AND_MASK_LE(__pdesc, 3, 13, 1)
+
+/* DWORD 5 */
+#define SET_RX_STATUS_DESC_TSFL(__pdesc, __val)			\
+	SET_BITS_OFFSET_LE(__pdesc, 5, 0, 32, __val)
+#define GET_RX_STATUS_DESC_TSFL(__pdesc)			\
+	SHIFT_AND_MASK_LE(__pdesc, 5, 0, 32)
+
+typedef __le32 tx_hdr[8];
 
 /* Rx Desc */
 #define RX_DESC_SIZE				24
 #define RX_DRV_INFO_SIZE_UNIT			8
-#define RX_LENGTH_MASK				0x3fff /* Bit 0 - 13 */
-#define RX_CRC32_ERR				BIT(14)
-#define RX_ICV_ERR				BIT(15)
-
-struct rx_hdr {
-	/* DWORD 0 */
-	__le16 pkt_len_and_bits;/*  0 - 13, 14, 15 */
-	u8 drvinfo_size:4;	/* 16 - 19 */
-	u8 security:3;		/* 20 - 22 */
-	u8 qos:1;		/* 23 */
-	u8 shift:2;		/* 24 - 25 */
-	u8 phy_status:1;	/* 26 */
-	u8 swdec:1;		/* 27 */
-	u8 last_seg:1;		/* 28 */
-	u8 first_seg:1;		/* 29 */
-	u8 eor:1;		/* 30 */
-	u8 own:1;		/* 31 */
-
-	/* DWORD 1 */
-	u8 mac_id:5;		/*  0 -  4 */
-	u8 tid:4;		/*  5 -  8 */
-	u8 unkn0100:5;		/*  9 - 13 */
-	u8 paggr:1;		/* 14 */
-	u8 faggr:1;		/* 15 */
-	u8 a1_fit:4;		/* 16 - 19 */
-	u8 a2_fit:4;		/* 20 - 23 */
-	u8 pam:1;		/* 24 */
-	u8 pwr:1;		/* 25 */
-	u8 more_data:1;		/* 26 */
-	u8 more_frag:1;		/* 27 */
-	u8 type:2;		/* 28 - 29 */
-	u8 mc:1;		/* 30 */
-	u8 bc:1;		/* 31 */
-
-	/* DWORD 2 */
-	__le16 seq_and_frag;	/*  0 - 15 */
-	u8 pkt_cnt;		/* 16 - 23 */
-	u8 unkn0200:6;		/* 24 - 29 */
-	u8 next_ind:1;		/* 30 */
-	u8 unkn0201:1;		/* 31 */
-
-	/* DWORD 3 */
-	u8 rx_mcs:6;		/*  0 -  5 */
-	u8 rx_ht:1;		/*  6 */
-	u8 amsdu:1;		/*  7 */
-	u8 splcp:1;		/*  8 */
-	u8 bw:1;		/*  9 */
-	u8 htc:1;		/* 10 */
-	u8 tcp_chk_rpt:1;	/* 11 */
-	u8 ip_chk_rpt:1;	/* 12 */
-	u8 tcp_chk_valid:1;	/* 13 */
-	u8 htc2:1;		/* 14 */
-	u8 hwpc_ind:1;		/* 15 */
-	__le16 iv0;		/* 16 - 31 */
-
-	/* DWORD 4 */
-	__le32 iv1;		/*  0 - 31 */
 
-	/* DWORD 5 */
-	__le32 tsf32;		/*  0 - 31 */
-} __packed;
+typedef __le32 rx_hdr[6];
 
 struct rx_hdr_phy_cck {
 	/* For CCK rate descriptor. This is an unsigned 8:1 variable.
@@ -220,8 +245,7 @@ struct rx_hdr_phy_cck {
 	 * Range from -64 to + 63.5 */
 	u8 adc_pwdb_X[4];
 	u8 sq_rpt;
-	u8 cck_agc_rpt:6;
-	u8 report:2;
+	u8 cck_agc_rpt;
 } __packed;
 
 struct rx_hdr_phy_ofdm {
@@ -248,8 +272,7 @@ union rx_hdr_phy {
 struct h2cc2h {
 	__le16 len;
 	u8 event;
-	u8 cmd_seq:7;
-	u8 last:1;
+	u8 cmd_seq;
 
 	u8 agg_num;
 	u8 unkn;
@@ -259,7 +282,7 @@ struct h2cc2h {
 } __packed;
 
 struct tx_packet {
-	struct tx_hdr hdr;
+	tx_hdr hdr;
 
 	union {
 		struct ieee80211_hdr i3e;
@@ -269,7 +292,7 @@ struct tx_packet {
 } __packed;
 
 struct rx_packet {
-	struct rx_hdr hdr;
+	rx_hdr hdr;
 	union {
 		/* No direct access to the rx data possible. The rx_hdr
 		 * contains shift value (used to tell the offset of the
@@ -353,13 +376,9 @@ enum r92su_enc_alg {
 
 static inline void __check_def__(void)
 {
-	BUILD_BUG_ON(sizeof(struct tx_hdr) != TX_DESC_SIZE);
-	BUILD_BUG_ON(sizeof(struct rx_hdr) != RX_DESC_SIZE);
+	BUILD_BUG_ON(sizeof(tx_hdr) != TX_DESC_SIZE);
+	BUILD_BUG_ON(sizeof(rx_hdr) != RX_DESC_SIZE);
 	BUILD_BUG_ON(sizeof(struct h2cc2h) != H2CC2H_HDR_LEN);
-
-	BUILD_BUG_ON(offsetof(struct tx_hdr, ip_check_sum) != 24);
-	BUILD_BUG_ON(offsetof(struct tx_hdr, heap_page) != 12);
-	BUILD_BUG_ON(offsetof(struct rx_hdr, tsf32) != 20);
 }
 
 #endif /* __R92SU_DEF_H__ */
--- a/drivers/net/wireless/r92su/fw.c
+++ b/drivers/net/wireless/r92su/fw.c
@@ -133,7 +133,7 @@ static int r92su_upload_firmware_part(st
 	int err;
 
 	do {
-		struct tx_hdr *hdr;
+		tx_hdr *hdr;
 		struct sk_buff *skb;
 		unsigned int current_block;
 
@@ -141,14 +141,15 @@ static int r92su_upload_firmware_part(st
 		if (!skb)
 			return -ENOMEM;
 
-		hdr = (struct tx_hdr *) skb_put(skb, sizeof(*hdr));
+		hdr = (tx_hdr *) skb_put(skb, sizeof(*hdr));
 		memset(hdr, 0, sizeof(*hdr));
 
 		current_block = min(block_size, len - done);
 		done += current_block;
 
-		hdr->pkt_len = cpu_to_le16(current_block);
-		hdr->linip = (len == done);
+		SET_TX_DESC_PKT_SIZE(hdr, current_block);
+		if (len == done)
+			SET_TX_DESC_LINIP(hdr, 1);
 
 		memcpy(skb_put(skb, current_block), iter, current_block);
 		err = r92su_usb_tx(r92su, skb, RTL8712_VOQ);
--- a/drivers/net/wireless/r92su/rx.c
+++ b/drivers/net/wireless/r92su/rx.c
@@ -42,12 +42,14 @@
 #include "michael.h"
 
 static void r92su_rx_add_radiotap(struct r92su *r92su,
-				  const struct rx_hdr *rx_hdr,
+				  rx_hdr *rx_hdr,
 				  struct sk_buff *skb,
-				  const unsigned int rtap_len)
+				  unsigned int rtap_len)
 {
 	unsigned char *pos;
 	struct ieee80211_radiotap_header *rthdr;
+	unsigned int rx_mcs;
+	bool ht;
 
 	rthdr = (struct ieee80211_radiotap_header *)skb_push(skb, rtap_len);
 	memset(rthdr, 0, sizeof(*rthdr));
@@ -68,19 +70,22 @@ static void r92su_rx_add_radiotap(struct
 	while ((pos - (u8 *)rthdr) & 7)
 		*pos++ = 0;
 
-	put_unaligned_le64(le32_to_cpu(rx_hdr->tsf32), pos);
+	put_unaligned_le64(GET_RX_STATUS_DESC_TSFL(rx_hdr), pos);
 	pos += 8;
 
 	/* IEEE80211_RADIOTAP_FLAGS */
 	*pos = IEEE80211_RADIOTAP_F_FCS;
-	if (rx_hdr->pkt_len_and_bits & cpu_to_le16(RX_CRC32_ERR))
+	if (GET_RX_STATUS_DESC_CRC32(rx_hdr))
 		*pos |= IEEE80211_RADIOTAP_F_BADFCS;
-	if (rx_hdr->splcp)
+	if (GET_RX_STATUS_DESC_SPLCP(rx_hdr))
 		*pos |= IEEE80211_RADIOTAP_F_SHORTPRE;
 	pos++;
 
+	rx_mcs = GET_RX_STATUS_DESC_RX_MCS(rx_hdr);
+
 	/* IEEE80211_RADIOTAP_RATE */
-	if (rx_hdr->rx_ht) {
+	ht = GET_RX_STATUS_DESC_RX_HT(rx_hdr);
+	if (ht) {
 		/* Without rate information don't add it. If we have,
 		 * MCS information is a separate field in radiotap,
 		 * added below. The byte here is needed as padding
@@ -89,17 +94,17 @@ static void r92su_rx_add_radiotap(struct
 		*pos = 0;
 	} else {
 		rthdr->it_present |= cpu_to_le32(1 << IEEE80211_RADIOTAP_RATE);
-		*pos = r92su->band_2GHZ.bitrates[rx_hdr->rx_mcs].bitrate / 5;
+		*pos = r92su->band_2GHZ.bitrates[rx_mcs].bitrate / 5;
 	}
 	pos++;
 
 	/* IEEE80211_RADIOTAP_CHANNEL */
 	put_unaligned_le16(r92su->current_channel->center_freq, pos);
 	pos += 2;
-	if (rx_hdr->rx_ht)
+	if (ht)
 		put_unaligned_le16(IEEE80211_CHAN_DYN | IEEE80211_CHAN_2GHZ,
 				   pos);
-	else if (rx_hdr->rx_mcs > 3)
+	else if (rx_mcs > 3)
 		put_unaligned_le16(IEEE80211_CHAN_OFDM | IEEE80211_CHAN_2GHZ,
 				   pos);
 	else
@@ -117,18 +122,18 @@ static void r92su_rx_add_radiotap(struct
 	put_unaligned_le16(0, pos);
 	pos += 2;
 
-	if (rx_hdr->rx_ht) {
+	if (ht) {
 		rthdr->it_present |= cpu_to_le32(1 << IEEE80211_RADIOTAP_MCS);
 		*pos++ = IEEE80211_RADIOTAP_MCS_HAVE_MCS |
 			 IEEE80211_RADIOTAP_MCS_HAVE_BW;
 		*pos = 0;
-		if (rx_hdr->bw)
+		if (GET_RX_STATUS_DESC_BW(rx_hdr))
 			*pos |= IEEE80211_RADIOTAP_MCS_BW_40;
 		pos++;
-		*pos++ = rx_hdr->rx_mcs;
+		*pos++ = rx_mcs;
 	}
 
-	if (rx_hdr->paggr) {
+	if (GET_RX_STATUS_DESC_PAGGR(rx_hdr)) {
 		u16 flags = 0;
 
 		/* ensure 4 byte alignment */
@@ -138,7 +143,7 @@ static void r92su_rx_add_radiotap(struct
 		rthdr->it_present |=
 			cpu_to_le32(1 << IEEE80211_RADIOTAP_AMPDU_STATUS);
 
-		if (rx_hdr->faggr)
+		if (GET_RX_STATUS_DESC_FAGGR(rx_hdr))
 			r92su->ampdu_reference++;
 
 		put_unaligned_le32(r92su->ampdu_reference, pos);
@@ -154,7 +159,7 @@ static void r92su_rx_add_radiotap(struct
 }
 
 static unsigned int r92su_rx_calc_radiotap_len(struct r92su *r92su,
-					       const struct rx_hdr *rx_hdr)
+					       rx_hdr *rx_hdr)
 {
 	unsigned int rtap_len;
 
@@ -170,10 +175,10 @@ static unsigned int r92su_rx_calc_radiot
 	/* padding for RX_FLAGS if necessary */
 	rtap_len = ALIGN(rtap_len, 2);
 
-	if (rx_hdr->rx_ht)
+	if (GET_RX_STATUS_DESC_RX_HT(rx_hdr))
 		rtap_len += 3;
 
-	if (rx_hdr->paggr) {
+	if (GET_RX_STATUS_DESC_PAGGR(rx_hdr)) {
 		rtap_len = ALIGN(rtap_len, 4);
 		rtap_len += 8;
 	}
@@ -208,7 +213,7 @@ static void r92su_rx_monitor(struct r92s
 			     const struct ieee80211_hdr *hdr,
 			     struct sk_buff *skb)
 {
-	struct rx_hdr rx_hdr;
+	rx_hdr rx_hdr;
 	unsigned int rtap_len;
 
 	memcpy(&rx_hdr, &rx->hdr, sizeof(rx_hdr));
@@ -597,6 +602,7 @@ r92su_rx_hw_header_check(struct r92su *r
 	struct ieee80211_hdr *hdr;
 	unsigned int min_len;
 	bool has_protect;
+
 	if (skb->len < (sizeof(*hdr) + FCS_LEN))
 		return RX_DROP;
 
@@ -606,12 +612,12 @@ r92su_rx_hw_header_check(struct r92su *r
 	hdr = (struct ieee80211_hdr *) skb->data;
 
 	/* filter out frames with bad fcs... if they did end up here */
-	if (rx->hdr.pkt_len_and_bits & cpu_to_le16(RX_CRC32_ERR))
+	if (GET_RX_STATUS_DESC_CRC32(&rx->hdr))
 		return RX_DROP;
 
 	has_protect = ieee80211_has_protected(hdr->frame_control);
 
-	if (has_protect && rx->hdr.swdec) {
+	if (has_protect && GET_RX_STATUS_DESC_SWDEC(&rx->hdr)) {
 		wiphy_err(r92su->wdev.wiphy, "hw didn't decipher frame.\n");
 		return RX_DROP;
 	}
@@ -1084,10 +1090,12 @@ static void r92su_rx_tasklet(unsigned lo
 	while ((skb = skb_dequeue(&r92su->rx_queue))) {
 		struct rx_packet *rx;
 		struct ieee80211_hdr *hdr;
+		unsigned int drvinfo_size;
 
 		rx = (struct rx_packet *) skb->data;
+		drvinfo_size = GET_RX_STATUS_DESC_DRVINFO_SIZE(&rx->hdr);
 		hdr = (struct ieee80211_hdr *) skb_pull(skb,
-			RX_DESC_SIZE + rx->hdr.drvinfo_size * 8);
+			RX_DESC_SIZE + drvinfo_size * 8);
 		switch (r92su->wdev.iftype) {
 		case NL80211_IFTYPE_MONITOR:
 			r92su_rx_monitor(r92su, rx, hdr, skb);
@@ -1122,19 +1130,23 @@ void r92su_rx(struct r92su *r92su, void
 		RTL92SU_SIZE_MAX_RX_BUFFER - RX_DESC_SIZE);
 
 	/* pkt_cnt seems to be valid only for the first aggregated packet?! */
-	pkt_cnt = max_t(unsigned int, rx->hdr.pkt_cnt, 1);
+	pkt_cnt = GET_RX_STATUS_DESC_PKTCNT(rx->hdr);
+	pkt_cnt = max_t(unsigned int, pkt_cnt, 1);
 
 	while (buf < end && pkt_cnt--) {
+		unsigned int drvinfo, shift;
 		rx = (struct rx_packet *) buf;
 
-		pkt_len = le16_to_cpu(rx->hdr.pkt_len_and_bits) &
-			  RX_LENGTH_MASK;
-		hdr_len = RX_DESC_SIZE + rx->hdr.drvinfo_size * 8;
+		drvinfo = GET_RX_STATUS_DESC_DRVINFO_SIZE(&rx->hdr) *
+			RX_DRV_INFO_SIZE_UNIT;
+		shift = GET_RX_STATUS_DESC_SHIFT(&rx->hdr);
+		pkt_len = GET_RX_STATUS_DESC_PKT_LEN(&rx->hdr);
+		hdr_len = RX_DESC_SIZE + drvinfo;
 
-		if (buf + pkt_len + hdr_len + rx->hdr.shift > end)
+		if (buf + pkt_len + hdr_len + shift > end)
 			goto err_garbage;
 
-		if (rx->hdr.mac_id == 0x1f && rx->hdr.tid == 0xf) {
+		if (GET_RX_STATUS_DESC_IS_CMD(&rx->hdr)) {
 			if (len - sizeof(rx->hdr) <
 			    le16_to_cpu(rx->c2h.len) + sizeof(rx->c2h)) {
 				wiphy_err(r92su->wdev.wiphy, "received clipped c2h command.");
@@ -1148,7 +1160,7 @@ void r92su_rx(struct r92su *r92su, void
 			if (!r92su_is_connected(r92su))
 				continue;
 
-			i3e = ((void *) buf) + hdr_len + rx->hdr.shift;
+			i3e = ((void *) buf) + hdr_len + shift;
 			skb = rx92su_rx_copy_data(rx, hdr_len, i3e, pkt_len);
 			if (skb)
 				skb_queue_tail(&r92su->rx_queue, skb);
--- a/drivers/net/wireless/r92su/tx.c
+++ b/drivers/net/wireless/r92su/tx.c
@@ -37,6 +37,7 @@
 
 #include "r92su.h"
 #include "tx.h"
+#include "reg.h"
 #include "def.h"
 #include "usb.h"
 #include "cmd.h"
@@ -75,45 +76,48 @@ r92su_tx_fill_desc(struct r92su *r92su,
 {
 	struct r92su_tx_info *tx_info = r92su_get_tx_info(skb);
 	struct ieee80211_hdr *i3e = (struct ieee80211_hdr *) skb->data;
-	struct tx_hdr *hdr = NULL;
+	tx_hdr *hdr = NULL;
 	u8 prio = skb->priority % ARRAY_SIZE(ieee802_1d_to_ac);
 
-	hdr = (struct tx_hdr *) skb_push(skb, sizeof(*hdr));
+	hdr = (tx_hdr *) skb_push(skb, sizeof(*hdr));
 	memset(hdr, 0 , sizeof(*hdr));
 
-	hdr->pkt_len = cpu_to_le16(skb->len - sizeof(*hdr));
-	hdr->offset = sizeof(*hdr);
-	hdr->linip = 0;
+	SET_TX_DESC_PKT_SIZE(hdr, skb->len - sizeof(*hdr));
+	SET_TX_DESC_OFFSET(hdr, sizeof(*hdr));
+	SET_TX_DESC_LAST_SEG(hdr, 1);
+	SET_TX_DESC_FIRST_SEG(hdr, 1);
+	SET_TX_DESC_OWN(hdr, 1);
 
 	if (ieee80211_is_data(i3e->frame_control))
-		hdr->mac_id = tx_info->sta->mac_id;
+		SET_TX_DESC_MACID(hdr, tx_info->sta->mac_id);
 	else if (ieee80211_is_mgmt(i3e->frame_control))
-		hdr->mac_id = 5;
+		SET_TX_DESC_MACID(hdr, 5);
 
-	hdr->queue_sel = r92su_802_1d_to_ac[ieee802_1d_to_ac[prio]];
+	SET_TX_DESC_QUEUE_SEL(hdr, r92su_802_1d_to_ac[ieee802_1d_to_ac[prio]]);
 
 	/* firmware will increase the seqnum by itself, when
 	 * the driver passes the correct "priority" to it */
-	hdr->priority = prio;
+	SET_TX_DESC_PRIORITY(hdr, prio);
 
-	hdr->non_qos = !ieee80211_is_data_qos(i3e->frame_control);
-	hdr->bmc = is_multicast_ether_addr(ieee80211_get_DA(i3e));
+	SET_TX_DESC_NON_QOS(hdr, !ieee80211_is_data_qos(i3e->frame_control));
+
+	SET_TX_DESC_BMC(hdr, is_multicast_ether_addr(ieee80211_get_DA(i3e)));
 
 	if (tx_info->key) {
 		switch (tx_info->key->type) {
 		case WEP40_ENCRYPTION:
 		case WEP104_ENCRYPTION: {
-			hdr->sec_type = 1;
-			hdr->key_id = tx_info->key->index;
+			SET_TX_DESC_SEC_TYPE(hdr, 1);
+			SET_TX_DESC_KEY_ID(hdr,	tx_info->key->index);
 			break;
 		}
 
 		case TKIP_ENCRYPTION:
-			hdr->sec_type = 2;
+			SET_TX_DESC_SEC_TYPE(hdr, 2);
 			break;
 
 		case AESCCMP_ENCRYPTION:
-			hdr->sec_type = 3;
+			SET_TX_DESC_SEC_TYPE(hdr, 3);
 			break;
 
 		default:
@@ -125,19 +129,16 @@ r92su_tx_fill_desc(struct r92su *r92su,
 
 	/* send EAPOL with failsafe rate */
 	if (tx_info->low_rate) {
-		hdr->user_rate = 1;
-		hdr->dis_fb = 1;
-		hdr->data_rate_fb_limit = 0x1f;
-		hdr->agg_break = 1;
+		SET_TX_DESC_USER_RATE(hdr, 1);
+		SET_TX_DESC_USER_TX_RATE(hdr, 0x001f8000);	 /* 1M */
+		if (tx_info->sta->ht_sta)
+			SET_TX_DESC_AGG_BREAK(hdr, 1);
 	} else if (tx_info->ampdu) {
 		/* The firmware will automatically enable aggregation
 		 * there's no need to set hdr->agg_en = 1 and hdr->tx_ht = 1;
 		 */
 	}
 
-	hdr->own = 1;
-	hdr->first_seg = 1;
-	hdr->last_seg = 1;
 	return TX_CONTINUE;
 }
 
@@ -588,7 +589,7 @@ tx_drop:
 		r92su->wdev.netdev->stats.tx_packets++;
 		r92su->wdev.netdev->stats.tx_bytes += skb->len;
 
-		r92su_usb_tx(r92su, skb, tx_hdr->queue_sel);
+		r92su_usb_tx(r92su, skb, GET_TX_DESC_QUEUE_SEL(tx_hdr));
 	}
 	rcu_read_unlock();
 	return;
