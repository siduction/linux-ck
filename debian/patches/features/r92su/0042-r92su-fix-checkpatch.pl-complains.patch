From e205dfee2a9d1d5b7697f51a1d8f97e7207a96ef Mon Sep 17 00:00:00 2001
From: Christian Lamparter <chunkeey@googlemail.com>
Date: Mon, 15 Apr 2013 23:56:00 +0200
Subject: [PATCH 42/65] r92su: fix checkpatch.pl complains

This patch fixes almost all complains from checkpatch.
What is left unfixed:

1.

ERROR: Macros with complex values should be enclosed in parenthesis
+#define TRACE_INCLUDE_PATH .

Reason:
	TRACE_INCLUDE_PATH content will be part of a include <...> path,
	so it can't be placed into ().

2.

WARNING: Avoid CamelCase: <intf->cur_altsetting->desc.bNumEndpoints>
+       r92su->ep_num = intf->cur_altsetting->desc.bNumEndpoints;

Reason:
	bNumEndpoints is part the official name from the usb spec.

Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
---
 r92su/Kconfig |  2 +-
 r92su/debug.c | 41 +++++++++++++++--------------------------
 r92su/main.c  |  7 ++++---
 r92su/rx.c    |  3 ++-
 r92su/sta.c   |  7 +++----
 r92su/sta.h   |  2 --
 r92su/trace.h | 14 +++++++-------
 r92su/tx.c    |  2 +-
 8 files changed, 33 insertions(+), 45 deletions(-)

--- a/drivers/net/wireless/r92su/Kconfig
+++ b/drivers/net/wireless/r92su/Kconfig
@@ -30,7 +30,7 @@ config R92SU_TRACING
 	default n
 	help
 	 Say Y here to trace all commands, including TX frames and IO
-         accesses, sent to the device. 
+         accesses, sent to the device.
 
 	 When tracing is not enabled, this option still has some
 	 (though rather small) overhead.
--- a/drivers/net/wireless/r92su/debug.c
+++ b/drivers/net/wireless/r92su/debug.c
@@ -35,33 +35,22 @@
 #include "debug.h"
 #include "trace.h"
 
-#define __r92su_fn(fn)						\
-void __r92su_ ##fn(struct r92su *r92su, const char *fmt, ...)	\
+#define __r92su_fn(fn, print)					\
+void __r92su_ ##fn(struct r92su *r92su,	const char *fmt, ...)	\
 {								\
-        struct va_format vaf = {				\
-                .fmt = fmt,					\
-        };							\
-        va_list args;						\
+	struct va_format vaf = {				\
+		.fmt = fmt,					\
+	};							\
+	va_list args;						\
 								\
-        va_start(args, fmt);					\
-        vaf.va = &args;						\
-        wiphy_ ##fn(r92su->wdev.wiphy, "%pV", &vaf);		\
-        trace_r92su_ ##fn(wiphy_dev(r92su->wdev.wiphy), &vaf);	\
-        va_end(args);						\
+	va_start(args, fmt);					\
+	vaf.va = &args;						\
+	if (print)						\
+		wiphy_ ##fn(r92su->wdev.wiphy, "%pV", &vaf);	\
+	trace_r92su_ ##fn(wiphy_dev(r92su->wdev.wiphy), &vaf);	\
+	va_end(args);						\
 }
 
-__r92su_fn(err)
-__r92su_fn(info)
-
-void __r92su_dbg(struct r92su *r92su, const char *fmt, ...)
-{
-        struct va_format vaf = {
-                .fmt = fmt,
-        };
-        va_list args;
-
-        va_start(args, fmt);
-        vaf.va = &args;
-        trace_r92su_dbg(wiphy_dev(r92su->wdev.wiphy), &vaf);
-        va_end(args);
-}
+__r92su_fn(err, true)
+__r92su_fn(info, true)
+__r92su_fn(dbg, false)
--- a/drivers/net/wireless/r92su/main.c
+++ b/drivers/net/wireless/r92su/main.c
@@ -547,7 +547,8 @@ static void r92su_bss_add_work(struct wo
 
 		chan_idx = le32_to_cpu(c2h_bss->config.frequency) - 1;
 		if (chan_idx < 0 || chan_idx >= r92su->band_2GHZ.n_channels) {
-			R92SU_ERR(r92su, "received survey event on bad channel.");
+			R92SU_ERR(r92su,
+				  "received survey event on bad channel.");
 			goto next;
 		}
 
@@ -1358,7 +1359,6 @@ out:
 static int r92su_stop(struct net_device *ndev)
 {
 	struct r92su *r92su = ndev->ml_priv;
-	struct r92su_add_bss *bss_priv;
 	struct llist_node *node;
 	int err = -EINVAL, i;
 
@@ -1396,7 +1396,8 @@ static int r92su_stop(struct net_device
 
 	node = llist_del_all(&r92su->add_bss_list);
 	while (node) {
-                bss_priv = llist_entry(node, struct r92su_add_bss, head);
+		struct r92su_add_bss *bss_priv =
+			llist_entry(node, struct r92su_add_bss, head);
 		node = ACCESS_ONCE(node->next);
 		kfree(bss_priv);
 	}
--- a/drivers/net/wireless/r92su/rx.c
+++ b/drivers/net/wireless/r92su/rx.c
@@ -1149,7 +1149,8 @@ void r92su_rx(struct r92su *r92su, void
 		if (GET_RX_DESC_IS_CMD(&rx->hdr)) {
 			if (len - sizeof(rx->hdr) <
 			    le16_to_cpu(rx->c2h.len) + sizeof(rx->c2h)) {
-				R92SU_ERR(r92su, "received clipped c2h command.");
+				R92SU_ERR(r92su,
+					"received clipped c2h command.");
 				r92su_mark_dead(r92su);
 			} else
 				r92su_c2h_event(r92su, &rx->c2h);
--- a/drivers/net/wireless/r92su/sta.c
+++ b/drivers/net/wireless/r92su/sta.c
@@ -113,7 +113,6 @@ void r92su_sta_alloc_tid(struct r92su *r
 		    (unsigned long) new_tid);
 		new_tid->r92su = r92su;
 		new_tid->sta = sta;
-		new_tid->last_rx = jiffies;
 		new_tid->head_seq = new_tid->ssn = ssn >> 4;
 		new_tid->size = 32;	 /* taken from a monitor */
 
@@ -145,7 +144,7 @@ struct r92su_sta *r92su_sta_alloc(struct
 		sta->aid = aid;
 
 		do_posix_clock_monotonic_gettime(&uptime);
-	        sta->last_connected = uptime.tv_sec;
+		sta->last_connected = uptime.tv_sec;
 	}
 	return sta;
 }
@@ -277,7 +276,7 @@ void r92su_sta_set_sinfo(struct r92su *r
 	sinfo->filled = STATION_INFO_CONNECTED_TIME |
 			STATION_INFO_SIGNAL;
 
-        do_posix_clock_monotonic_gettime(&uptime);
-        sinfo->connected_time = uptime.tv_sec - sta->last_connected;
+	do_posix_clock_monotonic_gettime(&uptime);
+	sinfo->connected_time = uptime.tv_sec - sta->last_connected;
 	sinfo->signal = sta->signal;
 }
--- a/drivers/net/wireless/r92su/sta.h
+++ b/drivers/net/wireless/r92su/sta.h
@@ -59,8 +59,6 @@ struct r92su_rx_tid {
 	struct r92su *r92su;
 	struct r92su_sta *sta;
 	struct timer_list reorder_timer;
-
-	unsigned long last_rx;
 };
 
 struct r92su_key {
--- a/drivers/net/wireless/r92su/trace.h
+++ b/drivers/net/wireless/r92su/trace.h
@@ -38,7 +38,7 @@ TRACE_EVENT(r92su_h2c,
 		DEV_ENTRY
 		__field(unsigned int, event)
 		__field(unsigned int, cmd_seq)
- 		__field(size_t, len)
+		__field(size_t, len)
 		__dynamic_array(u8, h2c, le16_to_cpu(h2c->len))
 	),
 
@@ -47,8 +47,8 @@ TRACE_EVENT(r92su_h2c,
 		__entry->event = h2c->event;
 		__entry->cmd_seq = h2c->cmd_seq;
 		__entry->len = le16_to_cpu(h2c->len);
-                memcpy(__get_dynamic_array(h2c), h2c, __entry->len);
-        ),
+		memcpy(__get_dynamic_array(h2c), h2c, __entry->len);
+	),
 
 	TP_printk(
 		"[%s] send cmd 0x%x, seq:%d, len %zd",
@@ -65,7 +65,7 @@ TRACE_EVENT(r92su_c2h,
 		DEV_ENTRY
 		__field(unsigned int, event)
 		__field(unsigned int, cmd_seq)
- 		__field(size_t, len)
+		__field(size_t, len)
 		__dynamic_array(u8, c2h, le16_to_cpu(c2h->len))
 	),
 
@@ -74,8 +74,8 @@ TRACE_EVENT(r92su_c2h,
 		__entry->event = c2h->event;
 		__entry->cmd_seq = c2h->cmd_seq;
 		__entry->len = le16_to_cpu(c2h->len);
-                memcpy(__get_dynamic_array(c2h), c2h, __entry->len);
-        ),
+		memcpy(__get_dynamic_array(c2h), c2h, __entry->len);
+	),
 
 	TP_printk(
 		"[%s] received event 0x%x, seq:%d, len %zd",
@@ -220,7 +220,7 @@ TRACE_EVENT(r92su_rx_data,
 		DEV_ASSIGN;
 		memcpy(__get_dynamic_array(data), skb->data, skb->len);
 	),
-        TP_printk("[%s] RX frame data", __get_str(dev))
+	TP_printk("[%s] RX frame data", __get_str(dev))
 );
 
 #undef TRACE_SYSTEM
--- a/drivers/net/wireless/r92su/tx.c
+++ b/drivers/net/wireless/r92su/tx.c
@@ -413,7 +413,7 @@ r92su_tx_fragment(struct r92su *r92su, s
 	limit = IEEE80211_MAX_FRAG_THRESHOLD;
 	/* once the firmware supports fragmentation...
 	 * enable this:
-	 * 	limit = r92su->wdev.wiphy->frag_threshold;
+	 *   limit = r92su->wdev.wiphy->frag_threshold;
 	 */
 
 	if ((skb->len + FCS_LEN) < limit) {
