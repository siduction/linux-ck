From 1c05874976d7d44bda08a87c50a9f4109291cfc2 Mon Sep 17 00:00:00 2001
From: Christian Lamparter <chunkeey@googlemail.com>
Date: Sun, 21 Apr 2013 18:46:43 +0200
Subject: [PATCH 46/65] r92su: add dump_station + sta refactoring

Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
---
 r92su/debugfs.c |  2 +-
 r92su/event.c   |  5 ++--
 r92su/main.c    | 31 ++++++++++++++++++++--
 r92su/r92su.h   |  1 +
 r92su/sta.c     | 82 +++++++++++++++++++++++++++++++++++++++------------------
 r92su/sta.h     |  8 +++---
 6 files changed, 94 insertions(+), 35 deletions(-)

--- a/drivers/net/wireless/r92su/debugfs.c
+++ b/drivers/net/wireless/r92su/debugfs.c
@@ -258,7 +258,7 @@ static char *r92su_debugfs_sta_table_rea
 	int i;
 	rcu_read_lock();
 	for (i = 0; i < ARRAY_SIZE(r92su->sta_table); i++) {
-		struct r92su_sta *sta = rcu_dereference(r92su->sta_table[i]);
+		struct r92su_sta *sta = r92su_sta_get_by_macid(r92su, i);
 		struct r92su_key *key;
 
 		ADD(buf, *len, buf_size, "mac_id: %2d ", i);
--- a/drivers/net/wireless/r92su/event.c
+++ b/drivers/net/wireless/r92su/event.c
@@ -113,8 +113,9 @@ static void c2h_add_sta_event(struct r92
 	new_sta = r92su_sta_alloc(r92su, addsta->mac_addr, id,
 				  le32_to_cpu(addsta->aid),
 				  GFP_ATOMIC);
-	if (new_sta)
-		r92su_sta_replace(r92su, new_sta);
+	if (!new_sta)
+		R92SU_ERR(r92su, "failed to alloc new station %pM",
+			  addsta->mac_addr);
 }
 
 static void c2h_del_sta_event(struct r92su *r92su, const struct h2cc2h *c2h)
--- a/drivers/net/wireless/r92su/main.c
+++ b/drivers/net/wireless/r92su/main.c
@@ -151,6 +151,33 @@ out:
 
 }
 
+static int r92su_dump_station(struct wiphy *wiphy, struct net_device *ndev,
+			      int idx, u8 *mac, struct station_info *sinfo)
+{
+	struct r92su *r92su = wiphy_priv(wiphy);
+	struct r92su_sta *sta;
+	int err = -ENOENT;
+
+	mutex_lock(&r92su->lock);
+	if (!r92su_is_connected(r92su)) {
+		err = -ENODEV;
+		goto out;
+	}
+
+	rcu_read_lock();
+	sta = r92su_sta_get_by_idx(r92su, idx);
+	if (sta) {
+		memcpy(mac, sta->mac_addr, ETH_ALEN);
+		r92su_sta_set_sinfo(r92su, sta, sinfo);
+		err = 0;
+	}
+	rcu_read_unlock();
+
+out:
+	mutex_unlock(&r92su->lock);
+	return err;
+}
+
 static bool r92su_parse_ht_cap_ie(struct r92su *r92su, u8 *ies, const u32 len)
 {
 	u8 *ht_cap_ie;
@@ -643,8 +670,6 @@ static void r92su_bss_connect_work(struc
 		if (sta->qos_sta)
 			sta->ht_sta = r92su_parse_ht_cap_ie(r92su, resp_ie,
 							    resp_ie_len);
-
-		r92su_sta_add(r92su, sta);
 		status = WLAN_STATUS_SUCCESS;
 
 		bss_priv->sta = sta;
@@ -1173,6 +1198,7 @@ static const struct cfg80211_ops r92su_c
 	.set_monitor_channel = r92su_set_monitor_channel,
 
 	.get_station = r92su_get_station,
+	.dump_station = r92su_dump_station,
 
 	.add_key = r92su_add_key,
 	.del_key = r92su_del_key,
@@ -1501,6 +1527,7 @@ struct r92su *r92su_alloc(struct device
 	INIT_WORK(&r92su->add_bss_work, r92su_bss_add_work);
 	INIT_WORK(&r92su->connect_bss_work, r92su_bss_connect_work);
 	INIT_DELAYED_WORK(&r92su->survey_done_work, r92su_survey_done_work);
+	INIT_LIST_HEAD(&r92su->sta_list);
 	r92su_hw_init(r92su);
 
 	r92su->wq = create_singlethread_workqueue(R92SU_DRVNAME);
--- a/drivers/net/wireless/r92su/r92su.h
+++ b/drivers/net/wireless/r92su/r92su.h
@@ -156,6 +156,7 @@ struct r92su {
 	unsigned int rx_alignment;
 
 	/* sta + keys */
+	struct list_head sta_list;
 	struct r92su_sta __rcu *sta_table[32];
 
 	/* cfg80211 info */
--- a/drivers/net/wireless/r92su/sta.c
+++ b/drivers/net/wireless/r92su/sta.c
@@ -87,10 +87,25 @@ static void r92su_free_sta_rcu(struct rc
 	kfree(sta);
 }
 
+/* need to be called under rcu lock */
 static void r92su_free_sta(struct r92su_sta *sta)
 {
-	if (sta)
+	if (sta) {
+		list_del_rcu(&sta->list);
 		call_rcu(&sta->rcu_head, r92su_free_sta_rcu);
+	}
+}
+
+/* need to be called under rcu lock */
+static void r92su_sta_xchg(struct r92su *r92su,
+			   struct r92su_sta *new_sta)
+{
+	struct r92su_sta *old_sta;
+	unsigned int mac_id = new_sta->mac_id % ARRAY_SIZE(r92su->sta_table);
+
+	old_sta = rcu_dereference(r92su->sta_table[mac_id]);
+	rcu_assign_pointer(r92su->sta_table[mac_id], new_sta);
+	r92su_free_sta(old_sta);
 }
 
 void r92su_sta_alloc_tid(struct r92su *r92su,
@@ -143,8 +158,23 @@ struct r92su_sta *r92su_sta_alloc(struct
 		sta->mac_id = mac_id;
 		sta->aid = aid;
 
+		INIT_LIST_HEAD(&sta->list);
 		do_posix_clock_monotonic_gettime(&uptime);
 		sta->last_connected = uptime.tv_sec;
+
+		rcu_read_lock();
+		/* Replace (and free) the previous station with the new one. */
+		r92su_sta_xchg(r92su, sta);
+
+		/* in station mode, there is only one entry in the
+		 * station table/station list. no locking is required.
+		 *
+		 * in ibss mode, additional sta_alloc and remove calls
+		 * from participating stations come from an irq-context.
+		 * Luckily they are already serialized.
+		 */
+		list_add_rcu(&sta->list, &r92su->sta_list);
+		rcu_read_unlock();
 	}
 	return sta;
 }
@@ -162,24 +192,6 @@ struct r92su_sta *r92su_sta_get(struct r
 	return NULL;
 }
 
-static struct r92su_sta *r92su_sta_xchg(struct r92su *r92su,
-					struct r92su_sta *new_sta)
-{
-	struct r92su_sta *old_sta;
-	unsigned int mac_id = new_sta->mac_id % ARRAY_SIZE(r92su->sta_table);
-
-	old_sta = rcu_dereference(r92su->sta_table[mac_id]);
-	rcu_assign_pointer(r92su->sta_table[mac_id], new_sta);
-	return old_sta;
-}
-
-void r92su_sta_replace(struct r92su *r92su, struct r92su_sta *new_sta)
-{
-	rcu_read_lock();
-	r92su_free_sta(r92su_sta_xchg(r92su, new_sta));
-	rcu_read_unlock();
-}
-
 void r92su_sta_del(struct r92su *r92su, int mac_id)
 {
 	struct r92su_sta *old_sta;
@@ -192,13 +204,6 @@ void r92su_sta_del(struct r92su *r92su,
 	rcu_read_unlock();
 }
 
-void r92su_sta_add(struct r92su *r92su, struct r92su_sta *new_sta)
-{
-	rcu_read_lock();
-	r92su_free_sta(r92su_sta_xchg(r92su, new_sta));
-	rcu_read_unlock();
-}
-
 static u32 get_random_wep_seq(void)
 {
 	u32 buf;
@@ -280,3 +285,28 @@ void r92su_sta_set_sinfo(struct r92su *r
 	sinfo->connected_time = uptime.tv_sec - sta->last_connected;
 	sinfo->signal = sta->signal;
 }
+
+struct r92su_sta *r92su_sta_get_by_idx(struct r92su *r92su, int idx)
+{
+	struct r92su_sta *sta;
+	int i = 0;
+
+	list_for_each_entry_rcu(sta, &r92su->sta_list, list) {
+		if (i < idx) {
+			i++;
+			continue;
+		}
+		return sta;
+	}
+
+	return NULL;
+}
+
+struct r92su_sta *r92su_sta_get_by_macid(struct r92su *r92su, int macid)
+{
+	if (macid < ARRAY_SIZE(r92su->sta_table)) {
+		return rcu_dereference(r92su->sta_table[macid]);
+	}
+
+	return NULL;
+}
--- a/drivers/net/wireless/r92su/sta.h
+++ b/drivers/net/wireless/r92su/sta.h
@@ -107,6 +107,7 @@ struct r92su_defrag_entry {
 
 struct r92su_sta {
 	struct rcu_head rcu_head;
+	struct list_head list;
 
 	u8 mac_addr[ETH_ALEN];
 	unsigned int mac_id;
@@ -140,8 +141,6 @@ struct r92su_sta *r92su_sta_alloc(struct
 				  const unsigned int aid,
 				  const gfp_t flag);
 
-void r92su_sta_replace(struct r92su *r92su, struct r92su_sta *new_sta);
-
 void r92su_sta_alloc_tid(struct r92su *r92su, struct r92su_sta *sta,
 			 const u8 tid, u16 size);
 
@@ -151,13 +150,14 @@ struct r92su_key *r92su_key_alloc(const
 
 void r92su_key_free(struct r92su_key *key);
 
-void r92su_sta_add(struct r92su *r92su, struct r92su_sta *new_sta);
-
 void r92su_sta_set_sinfo(struct r92su *r92su, struct r92su_sta *sta,
 			 struct station_info *sinfo);
 
 /* the following functions need rcu_read_lock! */
 struct r92su_sta *r92su_sta_get(struct r92su *r92su, const u8 *mac_addr);
+struct r92su_sta *r92su_sta_get_by_macid(struct r92su *r92su, int macid);
+struct r92su_sta *r92su_sta_get_by_idx(struct r92su *r92su, int idx);
+
 void r92su_sta_del(struct r92su *r92su, int mac_id);
 
 #endif /* __R92SU_STA_H__ */
