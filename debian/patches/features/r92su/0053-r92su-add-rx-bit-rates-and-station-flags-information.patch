From a5b233dd993dac2135e37510c6944ee63c161ce9 Mon Sep 17 00:00:00 2001
From: Christian Lamparter <chunkeey@googlemail.com>
Date: Sun, 21 Apr 2013 22:48:12 +0200
Subject: [PATCH 53/65] r92su: add rx bit rates and station flags information

Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
---
 r92su/r92su.h |  2 ++
 r92su/rx.c    | 24 ++++++++++++++++++++++++
 r92su/sta.c   | 26 ++++++++++++++++++++++++--
 r92su/sta.h   |  3 +++
 4 files changed, 53 insertions(+), 2 deletions(-)

--- a/drivers/net/wireless/r92su/r92su.h
+++ b/drivers/net/wireless/r92su/r92su.h
@@ -156,6 +156,8 @@ struct r92su {
 	unsigned int rx_alignment;
 
 	/* sta + keys */
+	unsigned int sta_generation;
+	unsigned int sta_num;
 	struct list_head sta_list;
 	spinlock_t sta_lock;
 
--- a/drivers/net/wireless/r92su/rx.c
+++ b/drivers/net/wireless/r92su/rx.c
@@ -645,6 +645,29 @@ r92su_rx_hw_header_check(struct r92su *r
 	return RX_CONTINUE;
 }
 
+static enum r92su_rx_control_t
+r92su_rx_sta_stats(struct r92su *r92su, struct sk_buff *skb,
+		   struct r92su_bss_priv *bss_priv,
+		   const struct rx_packet *rx)
+{
+	struct r92su_rx_info *rx_info = r92su_get_rx_info(skb);
+	unsigned int rate = GET_RX_DESC_RX_MCS(&rx->hdr);
+	unsigned int flag = 0;
+
+	if (GET_RX_DESC_RX_HT(&rx->hdr)) {
+		flag |= RATE_INFO_FLAGS_MCS;
+
+		if (GET_RX_DESC_BW(&rx->hdr))
+			flag |= RATE_INFO_FLAGS_40_MHZ_WIDTH;
+	} else {
+		rate = r92su->band_2GHZ.bitrates[rate].bitrate / 5;
+	}
+
+	rx_info->sta->last_rx_rate_flag = flag;
+	rx_info->sta->last_rx_rate = rate;
+	return RX_CONTINUE;
+}
+
 static bool r92su_check_if_match(struct r92su *r92su,
 				 struct sk_buff *new_skb,
 				 struct sk_buff_head *defrag,
@@ -997,6 +1020,7 @@ static void r92su_rx_data(struct r92su *
 	RX_HANDLER(r92su_rx_hw_header_check, rx);
 	RX_HANDLER(r92su_rx_find_sta);
 	RX_HANDLER(r92su_rx_deduplicate);
+	RX_HANDLER(r92su_rx_sta_stats, rx);
 
 	/* this moves the frame onto the in_frames queue */
 	RX_HANDLER(r92su_rx_reorder_ampdu, &skb, &frames);
--- a/drivers/net/wireless/r92su/sta.c
+++ b/drivers/net/wireless/r92su/sta.c
@@ -146,6 +146,8 @@ struct r92su_sta *r92su_sta_alloc(struct
 
 		spin_lock_irqsave(&r92su->sta_lock, flags);
 		list_add_rcu(&sta->list, &r92su->sta_list);
+		r92su->sta_generation++;
+		r92su->sta_num++;
 		spin_unlock_irqrestore(&r92su->sta_lock, flags);
 	}
 	return sta;
@@ -173,6 +175,8 @@ void r92su_sta_del(struct r92su *r92su,
 	if (sta) {
 		spin_lock_irqsave(&r92su->sta_lock, flags);
 		list_del_rcu(&sta->list);
+		r92su->sta_generation++;
+		r92su->sta_num--;
 		spin_unlock_irqrestore(&r92su->sta_lock, flags);
 
 		call_rcu(&sta->rcu_head, r92su_free_sta_rcu);
@@ -254,12 +258,30 @@ void r92su_sta_set_sinfo(struct r92su *r
 			 struct station_info *sinfo)
 {
 	struct timespec uptime;
+
+	sinfo->generation = r92su->sta_generation;
 	sinfo->filled = STATION_INFO_CONNECTED_TIME |
-			STATION_INFO_SIGNAL;
+			STATION_INFO_RX_BITRATE |
+			STATION_INFO_STA_FLAGS;
 
 	do_posix_clock_monotonic_gettime(&uptime);
 	sinfo->connected_time = uptime.tv_sec - sta->last_connected;
-	sinfo->signal = sta->signal;
+
+	sinfo->rxrate.flags = sta->last_rx_rate_flag;
+	if (sta->last_rx_rate_flag & RATE_INFO_FLAGS_MCS)
+		sinfo->rxrate.mcs = sta->last_rx_rate;
+	else
+		sinfo->rxrate.legacy = sta->last_rx_rate;
+
+	sinfo->sta_flags.mask = BIT(NL80211_STA_FLAG_ASSOCIATED) |
+				BIT(NL80211_STA_FLAG_AUTHENTICATED) |
+				BIT(NL80211_STA_FLAG_WME);
+
+	sinfo->sta_flags.set = BIT(NL80211_STA_FLAG_ASSOCIATED) |
+			       BIT(NL80211_STA_FLAG_AUTHENTICATED);
+
+	if (sta->qos_sta)
+		sinfo->sta_flags.set |= BIT(NL80211_STA_FLAG_WME);
 }
 
 struct r92su_sta *r92su_sta_get_by_idx(struct r92su *r92su, int idx)
--- a/drivers/net/wireless/r92su/sta.h
+++ b/drivers/net/wireless/r92su/sta.h
@@ -128,6 +128,9 @@ struct r92su_sta {
 
 	int signal;
 
+	u32 last_rx_rate;
+	u32 last_rx_rate_flag;
+
 	/* deduplication */
 	__le16 rx_seq;
 	__le16 rx_seq_tid[IEEE80211_NUM_TIDS];
